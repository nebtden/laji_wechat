{"version":3,"sources":["index.js","AipBodyAnalysis.js","client\\baseClient.js","auth\\devAuth.js","http\\httpClient.js","util\\objectTools.js","auth\\devAuthToken.js","const\\devScope.js","client\\requestInfo.js","const\\httpHeader.js","auth\\cloudAuth.js","auth\\bceAuth\\auth.js","auth\\bceAuth\\headers.js","auth\\bceAuth\\strings.js","auth\\bceAuth\\crypto.js","AipImageSearch.js","AipImageClassify.js","AipContentCensor.js","http\\httpClientExt.js","const\\code.js","AipFace.js","AipOcr.js","AipNlp.js","http\\httpClientNlp.js","AipKg.js","AipSpeech.js","http\\httpClientVoiceASR.js","http\\httpClientVoiceTTS.js","AipEasyDL.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ACHA,AFMA;ACFA,ACHA,AFMA;ACFA,ACHA,AFMA;ACFA,AENA,ADGA,AFMA;ACFA,AENA,ADGA,AFMA;ACFA,AENA,ADGA,AFMA;ACFA,AENA,ADGA,AENA,AJYA;ACFA,AENA,ADGA,AENA,AJYA;ACFA,AENA,ADGA,AENA,AJYA;ACFA,AENA,ADGA,AENA,AJYA,AKfA;AJaA,AENA,ADGA,AENA,AJYA,AKfA;AJaA,AENA,ADGA,AENA,AJYA,AKfA;AJaA,AENA,AGTA,AJYA,AENA,AJYA,AKfA;AJaA,AENA,AGTA,AJYA,AENA,AJYA,AKfA;AJaA,AENA,AGTA,AJYA,AENA,AJYA,AKfA;AJaA,AENA,AGTA,AJYA,AKfA,AHSA,AJYA,AKfA;AJaA,AENA,AGTA,AJYA,AKfA,AHSA,AJYA,AKfA;AJaA,AENA,AGTA,AJYA,AKfA,AHSA,AJYA,AKfA;AJaA,AENA,AGTA,AJYA,AMlBA,ADGA,AHSA,AJYA,AKfA;AJaA,AENA,AGTA,AJYA,AMlBA,ADGA,AHSA,AJYA,AKfA;AJaA,AENA,AGTA,AJYA,AMlBA,ADGA,AHSA,AJYA,AKfA;AJaA,AENA,AGTA,AJYA,AMlBA,ADGA,AENA,ALeA,AJYA,AKfA;AJaA,AENA,AGTA,AJYA,AMlBA,ADGA,AENA,ALeA,AJYA,AKfA;AJaA,AENA,AGTA,AJYA,AMlBA,ADGA,AENA,ALeA,AJYA,AKfA;AJaA,AS3BA,APqBA,AGTA,AJYA,AMlBA,ADGA,AENA,ALeA,AJYA,AKfA;AJaA,AS3BA,APqBA,AGTA,AJYA,AMlBA,ADGA,AENA,ALeA,ACHA;AJaA,AS3BA,APqBA,AGTA,AJYA,AMlBA,ADGA,AENA,ALeA,ACHA;AJaA,AU9BA,ADGA,APqBA,AGTA,AJYA,AMlBA,ADGA,AENA,ALeA,ACHA;AJaA,AU9BA,ADGA,APqBA,AGTA,AJYA,AMlBA,ADGA,AENA,ALeA,ACHA;AJaA,AU9BA,ADGA,APqBA,AGTA,AJYA,AMlBA,ADGA,AENA,ALeA,ACHA;AJaA,AU9BA,ACHA,AFMA,APqBA,AGTA,AJYA,AMlBA,ADGA,AENA,ALeA,ACHA;AJaA,AU9BA,ACHA,AFMA,APqBA,AGTA,AJYA,AMlBA,ADGA,AENA,ALeA,ACHA;AJaA,AU9BA,ACHA,AFMA,APqBA,AGTA,AJYA,AMlBA,ADGA,AENA,ALeA,ACHA;AJaA,AU9BA,ACHA,ACHA,AHSA,APqBA,AGTA,AJYA,AMlBA,ADGA,AENA,ALeA,ACHA;AJaA,AU9BA,ACHA,ACHA,AHSA,APqBA,AGTA,AJYA,AMlBA,ACHA,ALeA,ACHA;AJaA,AU9BA,ACHA,ACHA,AHSA,APqBA,AGTA,AJYA,AMlBA,ACHA,ALeA,ACHA;AJaA,AU9BA,AGTA,AFMA,ACHA,AHSA,APqBA,AGTA,AJYA,AMlBA,ACHA,ALeA,ACHA;AJaA,AU9BA,AGTA,AFMA,ACHA,AHSA,APqBA,AGTA,AJYA,AMlBA,ACHA,ALeA,ACHA;AJaA,AU9BA,AGTA,AFMA,ACHA,AHSA,APqBA,AGTA,AJYA,AMlBA,ACHA,ALeA,ACHA;AJaA,Ac1CA,AJYA,AGTA,AFMA,ACHA,AHSA,APqBA,AGTA,AJYA,AMlBA,ACHA,ALeA,ACHA;AJaA,Ac1CA,AJYA,AGTA,AFMA,ACHA,AHSA,APqBA,AGTA,AJYA,AMlBA,ACHA,ALeA,ACHA;AJaA,Ac1CA,AJYA,AGTA,AFMA,ACHA,AHSA,APqBA,AGTA,AJYA,AMlBA,ACHA,ALeA,ACHA;AJaA,Ae7CA,ADGA,AJYA,AGTA,AFMA,ACHA,AHSA,APqBA,AGTA,AJYA,AMlBA,ACHA,ALeA,ACHA;AJaA,Ae7CA,ADGA,AJYA,AGTA,AFMA,ACHA,AHSA,APqBA,AGTA,AJYA,AMlBA,ACHA,ALeA,ACHA;AJaA,Ae7CA,ADGA,AJYA,AGTA,AFMA,ACHA,AHSA,APqBA,AGTA,AJYA,AMlBA,ACHA,ALeA,ACHA;AJaA,AgBhDA,ADGA,ADGA,AJYA,AGTA,AFMA,ACHA,AHSA,APqBA,AGTA,AJYA,AMlBA,AJYA,ACHA;AJaA,AgBhDA,ADGA,ADGA,AJYA,AGTA,AFMA,ACHA,AHSA,APqBA,AGTA,AJYA,AMlBA,AJYA,ACHA;AJaA,AgBhDA,ADGA,ADGA,AJYA,AGTA,AFMA,ACHA,AHSA,APqBA,AGTA,AJYA,AMlBA,AJYA,ACHA;AJaA,AgBhDA,ADGA,ADGA,AJYA,AGTA,AFMA,ACHA,AHSA,APqBA,AGTA,AJYA,AMlBA,AJYA,Ac1CA,AbuCA;AJaA,AgBhDA,ADGA,ADGA,AJYA,AGTA,AFMA,ACHA,AHSA,APqBA,AGTA,AJYA,AMlBA,AJYA,Ac1CA,AbuCA;AJaA,AgBhDA,ADGA,ADGA,AJYA,AGTA,AFMA,ACHA,AHSA,APqBA,AGTA,AJYA,AMlBA,AJYA,Ac1CA,AbuCA;AJaA,AgBhDA,ADGA,ADGA,AJYA,AGTA,AFMA,ACHA,AHSA,APqBA,AGTA,AJYA,AMlBA,AWjCA,Af6CA,Ac1CA,AbuCA;AJaA,AgBhDA,ADGA,ADGA,AJYA,AGTA,AFMA,ACHA,AHSA,APqBA,AGTA,AJYA,AMlBA,AWjCA,Af6CA,Ac1CA,AbuCA;AJaA,AgBhDA,ADGA,ADGA,AJYA,AGTA,AFMA,ACHA,AHSA,APqBA,AGTA,AJYA,AMlBA,AWjCA,Af6CA,Ac1CA,AbuCA;AJaA,AgBhDA,AGTA,AJYA,ADGA,AJYA,AGTA,AFMA,ACHA,AHSA,APqBA,AGTA,AJYA,AMlBA,AWjCA,Af6CA,Ac1CA,AbuCA;AJaA,AgBhDA,AGTA,AJYA,ADGA,AJYA,AGTA,AFMA,ACHA,AHSA,APqBA,AGTA,AJYA,AMlBA,AWjCA,Af6CA,Ac1CA,AbuCA;AJaA,AgBhDA,AGTA,AJYA,ADGA,AJYA,AGTA,AFMA,ACHA,AHSA,APqBA,AGTA,AJYA,AMlBA,AWjCA,Af6CA,Ac1CA,AbuCA;AJaA,AgBhDA,AGTA,AJYA,ADGA,AMlBA,AV8BA,AGTA,AFMA,ACHA,AHSA,APqBA,AGTA,AJYA,AMlBA,AWjCA,Af6CA,Ac1CA;AjBoDA,AgBhDA,AGTA,AJYA,ADGA,AMlBA,AV8BA,AGTA,AFMA,ACHA,AHSA,APqBA,AGTA,AJYA,AMlBA,AWjCA,Af6CA,Ac1CA;AjBoDA,AgBhDA,AGTA,AJYA,ADGA,AMlBA,AV8BA,AGTA,AFMA,ACHA,AHSA,APqBA,AGTA,AJYA,AMlBA,AWjCA,Af6CA,Ac1CA;AjBoDA,AgBhDA,AGTA,AJYA,ADGA,AOrBA,ADGA,AV8BA,AGTA,AFMA,ACHA,AHSA,APqBA,AGTA,AJYA,AMlBA,AWjCA,Af6CA,Ac1CA;AjBoDA,AgBhDA,AGTA,AJYA,ADGA,AOrBA,ADGA,AV8BA,AGTA,AFMA,ACHA,AHSA,APqBA,AGTA,AJYA,AMlBA,AWjCA,Af6CA,Ac1CA;AjBoDA,AgBhDA,AGTA,AJYA,ADGA,AOrBA,ADGA,AV8BA,AGTA,AFMA,ACHA,AHSA,APqBA,AGTA,AJYA,AMlBA,AWjCA,Af6CA,Ac1CA;AjBoDA,AgBhDA,AGTA,AJYA,ADGA,AOrBA,ADGA,AV8BA,AGTA,AFMA,ACHA,AHSA,APqBA,AGTA,AJYA,AMlBA,AWjCA,Af6CA,Ac1CA,AKfA;AtBmEA,AgBhDA,AGTA,AJYA,ADGA,AOrBA,ADGA,AV8BA,AGTA,AFMA,ACHA,AHSA,APqBA,AGTA,AJYA,AMlBA,AWjCA,Af6CA,Ac1CA,AKfA;AtBmEA,AgBhDA,AGTA,AJYA,ADGA,AOrBA,ADGA,AV8BA,AGTA,AFMA,ACHA,AV8BA,AGTA,AJYA,AMlBA,AWjCA,Af6CA,Ac1CA,AKfA;AtBmEA,AgBhDA,AGTA,AJYA,ADGA,AS3BA,AFMA,ADGA,AV8BA,AGTA,AFMA,ACHA,AV8BA,AGTA,AJYA,AMlBA,AWjCA,Af6CA,Ac1CA,AKfA;AtBmEA,AgBhDA,AGTA,AJYA,ADGA,AS3BA,AFMA,ADGA,AV8BA,AGTA,AFMA,ACHA,AV8BA,AGTA,AJYA,AMlBA,AWjCA,Af6CA,Ac1CA,AKfA;AtBmEA,AgBhDA,AGTA,AJYA,ADGA,AS3BA,AFMA,ADGA,AV8BA,AGTA,AFMA,ACHA,AV8BA,AGTA,AJYA,AMlBA,AWjCA,Af6CA,Ac1CA,AKfA;AtBmEA,AgBhDA,AGTA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AGTA,AFMA,ACHA,AV8BA,AGTA,AJYA,AMlBA,AWjCA,Af6CA,Ac1CA,AKfA;AtBmEA,AgBhDA,AGTA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AGTA,AFMA,ACHA,AV8BA,AGTA,AJYA,AMlBA,AWjCA,Af6CA,Ac1CA,AKfA;AtBmEA,AgBhDA,AGTA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AGTA,AFMA,ACHA,AV8BA,AGTA,AJYA,AMlBA,AWjCA,Af6CA,Ac1CA,AKfA;AtBmEA,AgBhDA,AGTA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AGTA,AFMA,ACHA,AV8BA,AGTA,AJYA,AMlBA,AWjCA,Af6CA,Ac1CA,AKfA,AGTA;AzB4EA,AgBhDA,AGTA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AGTA,AFMA,ACHA,AV8BA,AGTA,AJYA,AMlBA,AWjCA,Af6CA,Ac1CA,AKfA,AGTA;AzB4EA,AgBhDA,AGTA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AGTA,AFMA,ACHA,AV8BA,AGTA,AJYA,AMlBA,AWjCA,Af6CA,Ac1CA,AKfA,AGTA;AzB4EA,AgBhDA,AGTA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AGTA,AFMA,AT2BA,AGTA,AJYA,AMlBA,AJYA,Ac1CA,AKfA,AGTA,ACHA;A1B+EA,AgBhDA,AGTA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AGTA,AFMA,AT2BA,AGTA,AJYA,AMlBA,AJYA,Ac1CA,AKfA,AGTA,ACHA;A1B+EA,AgBhDA,AGTA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AGTA,AFMA,AT2BA,AGTA,AJYA,AMlBA,AJYA,Ac1CA,AKfA,AGTA,ACHA;A1B+EA,AgBhDA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AGTA,AFMA,AT2BA,AGTA,AJYA,AMlBA,AJYA,Ac1CA,AKfA,AGTA,ACHA;A1B+EA,AgBhDA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AGTA,AFMA,AT2BA,AGTA,AJYA,AMlBA,AJYA,Ac1CA,AKfA,AGTA,ACHA;A1B+EA,AgBhDA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AGTA,AFMA,AT2BA,AGTA,AJYA,AMlBA,AJYA,Ac1CA,AKfA,AGTA,ACHA;A1B+EA,AgBhDA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AGTA,AFMA,AT2BA,AGTA,AJYA,AMlBA,AJYA,Ac1CA,AKfA,AGTA,ACHA;A1B+EA,AgBhDA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AGTA,AFMA,AT2BA,AGTA,AJYA,AMlBA,AJYA,Ac1CA,AKfA,AGTA,ACHA;A1B+EA,AgBhDA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AGTA,AFMA,AT2BA,AGTA,AJYA,AMlBA,AJYA,Ac1CA,AKfA,AGTA,ACHA;A1B+EA,AgBhDA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AGTA,AFMA,AT2BA,AGTA,AJYA,AMlBA,AJYA,Ac1CA,AKfA,AGTA,ACHA;A1B+EA,AgBhDA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AGTA,AFMA,AT2BA,AGTA,AJYA,AMlBA,AJYA,Ac1CA,AKfA,AGTA,ACHA;A1B+EA,AgBhDA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AGTA,AFMA,AT2BA,AGTA,AJYA,AMlBA,AJYA,Ac1CA,AKfA,AGTA,ACHA;A1B+EA,AgBhDA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AGTA,AFMA,ANkBA,AJYA,AMlBA,AJYA,Ac1CA,AKfA,AGTA,ACHA;A1B+EA,AgBhDA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AGTA,AFMA,ANkBA,AJYA,AMlBA,AJYA,Ac1CA,AKfA,AGTA,ACHA;A1B+EA,AgBhDA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AGTA,AFMA,ANkBA,AJYA,AMlBA,AJYA,Ac1CA,AKfA,AGTA,ACHA;A1B+EA,AgBhDA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AGTA,AFMA,ANkBA,AJYA,AMlBA,AJYA,Ac1CA,AKfA,AGTA,ACHA;A1B+EA,AgBhDA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AGTA,AFMA,ANkBA,AJYA,AMlBA,AJYA,Ac1CA,AKfA,AGTA,ACHA;A1B+EA,AgBhDA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AGTA,AFMA,ANkBA,AJYA,AMlBA,AJYA,Ac1CA,AKfA,AGTA,ACHA;A1B+EA,AgBhDA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AGTA,ARwBA,AJYA,AMlBA,AJYA,Ac1CA,AKfA,AGTA,ACHA;A1B+EA,AgBhDA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AGTA,AZoCA,AMlBA,AJYA,Ac1CA,AKfA,AGTA,ACHA;A1B+EA,AgBhDA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AGTA,AZoCA,AMlBA,AJYA,Ac1CA,AKfA,AGTA,ACHA;A1B+EA,AgBhDA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AGTA,AZoCA,AMlBA,AJYA,Ac1CA,AKfA,AGTA,ACHA;A1B+EA,AgBhDA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AGTA,AZoCA,AMlBA,AJYA,Ac1CA,AKfA,AGTA,ACHA;A1B+EA,AgBhDA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AGTA,AZoCA,AMlBA,AJYA,Ac1CA,AKfA,AGTA,ACHA;A1B+EA,AgBhDA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AGTA,AZoCA,AMlBA,AJYA,Ac1CA,AKfA,AGTA,ACHA;A1B+EA,AgBhDA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AGTA,AZoCA,AMlBA,AJYA,Ac1CA,AKfA,AGTA,ACHA;A1B+EA,AgBhDA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AGTA,AZoCA,AMlBA,AJYA,Ac1CA,AKfA,AGTA,ACHA;A1B+EA,AgBhDA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AGTA,AZoCA,AMlBA,Ae7CA,AGTA,ACHA;A1B+EA,AgBhDA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AGTA,AZoCA,AMlBA,Ae7CA,AGTA,ACHA;A1B+EA,AgBhDA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AGTA,AZoCA,AMlBA,Ae7CA,AGTA,ACHA;A1B+EA,AgBhDA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AGTA,AZoCA,AMlBA,Ae7CA,AGTA,ACHA;A1B+EA,AgBhDA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AGTA,AZoCA,AMlBA,Ae7CA,AGTA,ACHA;A1B+EA,AgBhDA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AGTA,AZoCA,AMlBA,Ae7CA,AGTA,ACHA;A1B+EA,AgBhDA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AGTA,AZoCA,AMlBA,Ae7CA,AGTA,ACHA;A1B+EA,AgBhDA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AGTA,AZoCA,AMlBA,Ae7CA,AGTA,ACHA;A1B+EA,AgBhDA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AGTA,AZoCA,AMlBA,Ae7CA,AGTA,ACHA;A1B+EA,AgBhDA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AGTA,AZoCA,AMlBA,Ae7CA,AGTA,ACHA;A1B+EA,AgBhDA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AGTA,AZoCA,AMlBA,Ae7CA,AGTA,ACHA;A1B+EA,AgBhDA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AGTA,AZoCA,AMlBA,Ae7CA,AGTA,ACHA;A1B+EA,AgBhDA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AGTA,AZoCA,AMlBA,Ae7CA,AGTA,ACHA;A1B+EA,AgBhDA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AGTA,AZoCA,AMlBA,Ae7CA,AGTA,ACHA;A1B+EA,AgBhDA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AGTA,AZoCA,AMlBA,Ae7CA,AGTA,ACHA;A1B+EA,AgBhDA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AGTA,AZoCA,AMlBA,Ae7CA,AGTA,ACHA;A1B+EA,AgBhDA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AGTA,AZoCA,AqB/DA,AGTA,ACHA;A1B+EA,AgBhDA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AT2BA,AqB/DA,AGTA,ACHA;A1B+EA,AgBhDA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AT2BA,AqB/DA,AGTA,ACHA;A1B+EA,AgBhDA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AT2BA,AqB/DA,AGTA,ACHA;A1B+EA,AgBhDA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AT2BA,AqB/DA,AGTA,ACHA;A1B+EA,AgBhDA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AT2BA,AqB/DA,AGTA,ACHA;A1B+EA,AgBhDA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AT2BA,AqB/DA,AGTA,ACHA;A1B+EA,AgBhDA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AT2BA,AqB/DA,AGTA,ACHA;A1B+EA,AgBhDA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AT2BA,AqB/DA,AGTA,ACHA;A1B+EA,AgBhDA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AT2BA,AqB/DA,AGTA,ACHA;A1B+EA,AgBhDA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AT2BA,AqB/DA,AGTA,ACHA;A1B+EA,AgBhDA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AT2BA,AqB/DA,AGTA,ACHA;A1B+EA,AgBhDA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AT2BA,AqB/DA,AGTA,ACHA;A1B+EA,AgBhDA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AT2BA,AqB/DA,AGTA,ACHA;A1B+EA,AgBhDA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AT2BA,AqB/DA,AGTA,ACHA;A1B+EA,AgBhDA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AT2BA,AqB/DA,AGTA,ACHA;A1B+EA,AgBhDA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AT2BA,AqB/DA,AGTA,ACHA;A1B+EA,AgBhDA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AT2BA,AqB/DA,AGTA,ACHA;A1B+EA,AgBhDA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AT2BA,AqB/DA,AGTA,ACHA;A1B+EA,AgBhDA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AT2BA,AqB/DA,AGTA,ACHA;A1B+EA,AgBhDA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AT2BA,AqB/DA,AIZA;A1B+EA,AgBhDA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AT2BA,AqB/DA,AIZA;A1B+EA,AgBhDA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AT2BA,AqB/DA,AIZA;AV+BA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AT2BA,AqB/DA,AIZA;AV+BA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AT2BA,AqB/DA;ANmBA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AT2BA,AqB/DA;ANmBA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AT2BA;Ae5CA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AT2BA;Ae5CA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AT2BA;Ae5CA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AT2BA;Ae5CA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AT2BA;Ae5CA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AT2BA;Ae5CA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AT2BA;Ae5CA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AT2BA;Ae5CA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AT2BA;Ae5CA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AT2BA;Ae5CA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AT2BA;Ae5CA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AT2BA;Ae5CA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AT2BA;Ae5CA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AT2BA;Ae5CA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AT2BA;Ae5CA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AT2BA;Ae5CA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AT2BA;Ae5CA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AT2BA;Ae5CA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AT2BA;Ae5CA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AT2BA;Ae5CA,AWjCA,ARwBA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AT2BA;Ae5CA,AGTA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AT2BA;Ae5CA,AGTA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AT2BA;Ae5CA,AGTA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AT2BA;Ae5CA,AGTA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AT2BA;Ae5CA,AGTA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AT2BA;Ae5CA,AGTA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AT2BA;Ae5CA,AGTA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AT2BA;Ae5CA,AGTA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AT2BA;Ae5CA,AGTA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AT2BA;Ae5CA,AGTA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AT2BA;Ae5CA,AGTA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AT2BA;Ae5CA,AGTA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AT2BA;Ae5CA,AGTA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AT2BA;Ae5CA,AGTA,AJYA,ADGA,AS3BA,AFMA,ADGA,AIZA,Ad0CA,AT2BA;Ae5CA,AGTA,AJYA,ADGA,AS3BA,AFMA,ADGA,AV8BA,AT2BA;Ae5CA,AGTA,AJYA,ADGA,AS3BA,AFMA,ADGA,AV8BA,AT2BA;Ae5CA,AGTA,AJYA,ADGA,AS3BA,AFMA,ADGA,AV8BA,AT2BA;Ae5CA,AGTA,AJYA,ADGA,AS3BA,AFMA,ADGA,AV8BA,AT2BA;Ae5CA,AGTA,AJYA,ADGA,AS3BA,AFMA,ADGA,AV8BA,AT2BA;Ae5CA,AGTA,AJYA,ADGA,AS3BA,AFMA,ADGA,AV8BA,AT2BA;Ae5CA,AGTA,AJYA,ADGA,AS3BA,AFMA,ADGA,AV8BA,AT2BA;Ae5CA,AGTA,AJYA,ADGA,AS3BA,AFMA,ADGA,AV8BA,AT2BA;Ae5CA,AGTA,AJYA,ADGA,AS3BA,AFMA,ADGA,AV8BA,AT2BA;Ae5CA,AGTA,AJYA,ADGA,AS3BA,AFMA,ADGA,AV8BA,AT2BA;Ae5CA,AGTA,AJYA,ADGA,AS3BA,AFMA,ADGA,AV8BA,AT2BA;Ae5CA,AGTA,AJYA,ADGA,AS3BA,AFMA,ADGA,AV8BA,AT2BA;Ae5CA,AGTA,AJYA,ADGA,AS3BA,AFMA,ADGA,AV8BA,AT2BA;Ae5CA,AGTA,AJYA,ADGA,AS3BA,AFMA,ADGA,AV8BA,AT2BA;Ae5CA,AGTA,AJYA,ADGA,AS3BA,AFMA,ADGA,AnByDA;Ae5CA,AGTA,AJYA,ADGA,AS3BA,AFMA,ADGA,AnByDA;Ae5CA,AGTA,AJYA,ADGA,AS3BA,AFMA,ADGA,AnByDA;Ae5CA,AGTA,AJYA,ADGA,AS3BA,AFMA,ADGA,AnByDA;Ae5CA,AGTA,AJYA,ADGA,AS3BA,AFMA,ADGA,AnByDA;Ae5CA,AGTA,AJYA,ADGA,AS3BA,AFMA,ADGA,AnByDA;Ae5CA,AGTA,AJYA,ADGA,AS3BA,AFMA,ADGA,AnByDA;Ae5CA,AGTA,AJYA,ADGA,AS3BA,AFMA,ADGA,AnByDA;Ae5CA,AGTA,AJYA,ADGA,AS3BA,AFMA,ADGA,AnByDA;Ae5CA,AGTA,AJYA,ADGA,AS3BA,AFMA,ADGA,AnByDA;Ae5CA,AGTA,AJYA,ADGA,AS3BA,AFMA,ADGA,AnByDA;Ae5CA,AGTA,AJYA,ADGA,AS3BA,AFMA,ADGA,AnByDA;Ae5CA,AGTA,AJYA,ADGA,AS3BA,AFMA,ADGA,AnByDA;Ae5CA,AGTA,AJYA,ADGA,AS3BA,AFMA,ADGA,AnByDA;AkBrDA,AJYA,ADGA,AS3BA,AFMA,ADGA,AnByDA;AkBrDA,AJYA,ADGA,AS3BA,AFMA,ADGA,AnByDA;AkBrDA,AJYA,ADGA,AS3BA,AFMA,ADGA,AnByDA;AkBrDA,AJYA,ADGA,AS3BA,AFMA,ADGA,AnByDA;AkBrDA,AJYA,ADGA,AS3BA,AFMA,ADGA,AnByDA;AkBrDA,AJYA,ADGA,AS3BA,AFMA,ADGA,AnByDA;AkBrDA,AJYA,ADGA,AS3BA,AFMA,ADGA,AnByDA;AkBrDA,AJYA,ADGA,AS3BA,AFMA,ADGA,AnByDA;AkBrDA,AJYA,ADGA,AS3BA,AFMA,ADGA,AnByDA;AkBrDA,AJYA,ADGA,AS3BA,AFMA,ADGA,AnByDA;AkBrDA,AJYA,ADGA,AS3BA,AFMA,ADGA,AnByDA;AkBrDA,AJYA,ADGA,AS3BA,AFMA,ADGA,AnByDA;AkBrDA,AJYA,ADGA,AS3BA,AFMA,ADGA,AnByDA;AkBrDA,AJYA,ADGA,AS3BA,AFMA,ADGA,AnByDA;AkBrDA,AJYA,ADGA,AS3BA,AFMA,ADGA;ADIA,AJYA,ADGA,AS3BA,AFMA,ADGA;ADIA,AJYA,ADGA,AS3BA,AFMA,ADGA;ADIA,AJYA,ADGA,AS3BA,AFMA,ADGA;ADIA,AJYA,ADGA,AS3BA,AFMA,ADGA;ADIA,AJYA,ADGA,AS3BA,AFMA,ADGA;ADIA,AJYA,ADGA,AS3BA,AFMA,ADGA;ADIA,AJYA,ADGA,AS3BA,AFMA,ADGA;ADIA,AJYA,ADGA,AS3BA,AFMA,ADGA;ADIA,AJYA,ADGA,AS3BA,AFMA,ADGA;ADIA,AJYA,ADGA,AS3BA,AFMA,ADGA;ADIA,AJYA,ADGA,AS3BA,AFMA,ADGA;ADIA,AJYA,ADGA,AS3BA,AFMA,ADGA;ADIA,AJYA,ADGA,AS3BA,AFMA,ADGA;ADIA,AJYA,ADGA,AS3BA,AFMA,ADGA;ADIA,AJYA,ADGA,AS3BA,AFMA,ADGA;ADIA,AJYA,ADGA,AS3BA,AFMA,ADGA;ADIA,AJYA,ADGA,AS3BA,AFMA,ADGA;ADIA,AJYA,ADGA,AS3BA,AFMA,ADGA;ADIA,AJYA,ADGA,AS3BA,AFMA,ADGA;ADIA,AJYA,ADGA,AS3BA,AFMA,ADGA;ADIA,AJYA,ADGA,AS3BA,AFMA,ADGA;ADIA,AJYA,ADGA,AOrBA,ADGA;ADIA,AJYA,ADGA,AOrBA,ADGA;ADIA,AJYA,ADGA,AOrBA,ADGA;ADIA,AJYA,ADGA,AOrBA,ADGA;ADIA,AJYA,ADGA,AOrBA,ADGA;ADIA,AJYA,ADGA,AOrBA,ADGA;ADIA,AJYA,ADGA,AOrBA,ADGA;ADIA,AJYA,ADGA,AOrBA,ADGA;ADIA,AJYA,ADGA,AOrBA,ADGA;ADIA,AJYA,ADGA,AOrBA,ADGA;ADIA,AJYA,ADGA,AOrBA,ADGA;ADIA,AJYA,ADGA,AOrBA,ADGA;ADIA,AJYA,ADGA,AOrBA,ADGA;ADIA,AJYA,ADGA,AOrBA,ADGA;ADIA,AJYA,ADGA,AOrBA,ADGA;ADIA,AJYA,ADGA,AOrBA,ADGA;ADIA,AJYA,ADGA,AOrBA,ADGA;ADIA,AJYA,ADGA,AOrBA,ADGA;ADIA,AJYA,ADGA,AOrBA,ADGA;ADIA,AJYA,ADGA,AOrBA,ADGA;ADIA,AJYA,ADGA,AOrBA,ADGA;ADIA,AJYA,ADGA,AOrBA,ADGA;ADIA,AJYA,ADGA,AOrBA,ADGA;ADIA,AJYA,ADGA,AOrBA,ADGA;ADIA,AJYA,ADGA,AOrBA,ADGA;ADIA,AJYA,ADGA,AOrBA,ADGA;ADIA,AJYA,ADGA,AOrBA,ADGA;ADIA,AJYA,ADGA,AOrBA,ADGA;ADIA,AJYA,ADGA,AOrBA,ADGA;ADIA,AJYA,ADGA,AOrBA,ADGA;ADIA,AJYA,ADGA,AOrBA,ADGA;ADIA,AJYA,ADGA,AOrBA,ADGA;ADIA,AJYA,ADGA,AOrBA,ADGA;ADIA,AJYA,ADGA,AOrBA,ADGA;ADIA,AJYA,ADGA,AOrBA,ADGA;ADIA,AJYA,ADGA,AOrBA,ADGA;ADIA,AJYA,ADGA,AOrBA,ADGA;ADIA,AJYA,ADGA,AOrBA,ADGA;ADIA,AJYA,ADGA,AOrBA,ADGA;ADIA,AJYA,ADGA,AOrBA,ADGA;ADIA,AJYA,ADGA,AOrBA,ADGA;ADIA,AJYA,ADGA,AOrBA,ADGA;ADIA,AJYA,ADGA,AOrBA,ADGA;ADIA,AJYA,ADGA,AOrBA,ADGA;ADIA,AJYA,ADGA,AOrBA,ADGA;ADIA,AJYA,ADGA,AOrBA,ADGA;ADIA,AJYA,ADGA,AOrBA,ADGA;ADIA,AJYA,ADGA,AOrBA,ADGA;ADIA,AJYA,ADGA,AOrBA,ADGA;ADIA,AJYA,ADGA,AOrBA,ADGA;ADIA,AJYA,ADGA,AOrBA,ADGA;ADIA,AJYA,ADGA,AOrBA,ADGA;ADIA,AJYA,ADGA,AOrBA,ADGA;ADIA,AJYA,ADGA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AOrBA,ADGA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ADIA,ALeA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;ANmBA,AMlBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["'use strict';\n/**\n * Copyright (c) 2017 Baidu.com, Inc. All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations under the License.\n *\n * @file index\n * @author baiduAip\n */\n\n\nmodule.exports = {\n    bodyanalysis: require('./AipBodyAnalysis'),\n    imageSearch: require('./AipImageSearch'),\n    imageClassify: require('./AipImageClassify'),\n    contentCensor: require('./AipContentCensor'),\n    face: require('./AipFace'),\n    ocr: require('./AipOcr'),\n    nlp: require('./AipNlp'),\n    kg: require('./AipKg'),\n    speech: require('./AipSpeech'),\n    easydl: require('./AipEasyDL'),\n    HttpClient: require('./http/httpClient')\n};","'use strict';\n/**\n * Copyright (c) 2017 Baidu.com, Inc. All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations under the License.\n *\n * @file AipBodyAnalysis.js\n * @author baidu aip\n */\n\nconst BaseClient = require('./client/baseClient');\n\nconst RequestInfo = require('./client/requestInfo');\n\nconst HttpClient = require('./http/httpClient');\n\nconst objectTools = require('./util/objectTools');\n\nconst METHOD_POST = 'POST';\n\nconst BODY_ANALYSIS_PATH = '/rest/2.0/image-classify/v1/body_analysis';\nconst BODY_ATTR_PATH = '/rest/2.0/image-classify/v1/body_attr';\nconst BODY_NUM_PATH = '/rest/2.0/image-classify/v1/body_num';\nconst GESTURE_PATH = '/rest/2.0/image-classify/v1/gesture';\nconst BODY_SEG_PATH = '/rest/2.0/image-classify/v1/body_seg';\n\n\n/**\n * AipBodyAnalysis类\n *\n * @class\n * @extends BaseClient\n * @constructor\n * @param {string} appid appid.\n * @param {string} ak  access key.\n * @param {string} sk  security key.\n */\nclass AipBodyAnalysis extends BaseClient {\n    constructor(appId, ak, sk) {\n        super(appId, ak, sk);\n    }\n    commonImpl(param) {\n        let httpClient = new HttpClient();\n        let apiUrl = param.targetPath;\n        delete param.targetPath;\n        let requestInfo = new RequestInfo(apiUrl,\n            param, METHOD_POST);\n        return this.doRequest(requestInfo, httpClient);\n    }\n\n    /**\n     * 人体关键点识别接口\n     *\n     * @param {string} image - 图像数据，base64编码，要求base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     * @return {Promise} - 标准Promise对象\n     */\n    bodyAnalysis(image, options) {\n        let param = {\n            image: image,\n            targetPath: BODY_ANALYSIS_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 人体属性识别接口\n     *\n     * @param {string} image - 图像数据，base64编码，要求base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     *   type gender,<br>age,<br>lower_wear,<br>upper_wear,<br>headwear,<br>glasses,<br>upper_color,<br>lower_color,<br>cellphone,<br>upper_wear_fg,<br>upper_wear_texture,<br>lower_wear_texture,<br>orientation,<br>umbrella,<br>bag,<br>smoke,<br>vehicle,<br>carrying_item,<br>upper_cut,<br>lower_cut,<br>occlusion &#124; 1）可选值说明：<br>gender-性别，<br>age-年龄阶段，<br>lower_wear-下身服饰，<br>upper_wear-上身服饰，<br>headwear-是否戴帽子，<br>glasses-是否戴眼镜，<br>upper_color-上身服饰颜色，<br>lower_color-下身服饰颜色，<br>cellphone-是否使用手机，<br>upper_wear_fg-上身服饰细分类，<br>upper_wear_texture-上身服饰纹理，<br>orientation-身体朝向，<br>umbrella-是否撑伞；<br>bag-背包,<br>smoke-是否吸烟,<br>vehicle-交通工具,<br>carrying_item-是否有手提物,<br>upper_cut-上方截断,<br>lower_cut-下方截断,<br>occlusion-遮挡<br>2）type 参数值可以是可选值的组合，用逗号分隔；**如果无此参数默认输出全部20个属性**\n     * @return {Promise} - 标准Promise对象\n     */\n    bodyAttr(image, options) {\n        let param = {\n            image: image,\n            targetPath: BODY_ATTR_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 人流量统计接口\n     *\n     * @param {string} image - 图像数据，base64编码，要求base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     *   area 特定框选区域坐标，逗号分隔，如‘x1,y1,x2,y2,x3,y3...xn,yn'，默认尾点和首点相连做闭合，**此参数为空或无此参数默认识别整个图片的人数**\n     *   show 是否输出渲染的图片，默认不返回，**选true时返回渲染后的图片(base64)**，其它无效值或为空则默认false\n     * @return {Promise} - 标准Promise对象\n     */\n    bodyNum(image, options) {\n        let param = {\n            image: image,\n            targetPath: BODY_NUM_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 手势识别接口\n     *\n     * @param {string} image - 图像数据，base64编码，要求base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     * @return {Promise} - 标准Promise对象\n     */\n    gesture(image, options) {\n        let param = {\n            image: image,\n            targetPath: GESTURE_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 人像分割接口\n     *\n     * @param {string} image - 图像数据，base64编码，要求base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     * @return {Promise} - 标准Promise对象\n     */\n    bodySeg(image, options) {\n        let param = {\n            image: image,\n            targetPath: BODY_SEG_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n}\n\nmodule.exports = AipBodyAnalysis;\n\n","'use strict';\n/**\n * Copyright (c) 2017 Baidu.com, Inc. All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations under the License.\n *\n * @file baseClient\n * @author baiduAip\n */\nconst DevAuth = require('../auth/devAuth');\n\nconst DevAuthToken = require('../auth/devAuthToken');\n\n\n/**\n * 无授权判断状态\n *\n * @const\n * @type {number}\n */\nconst AUTHTYPE_INIT = 0;\n\n/**\n * 确定为云用户\n *\n * @const\n * @type {number}\n */\nconst AUTHTYPE_BCE = 1;\n\n/**\n * 确定为开发者用户（手动输入token模式,以及token中包含了正确的scope）\n *\n * @const\n * @type {number}\n */\nconst AUTHTYPE_DEV = 2;\n\n/**\n * 获取开发者token成功用户\n *\n * @const\n * @type {number}\n */\nconst AUTHTYPE_DEV_OR_BCE = 3;\n\n\n/**\n * 初始状态\n *\n * @const\n * @type {number}\n */\nconst STATUS_INIT = 0;\n\n/**\n * 获取开发者token中\n *\n * @const\n * @type {number}\n */\nconst STATUS_AUTHTYPE_REQESTING = 1;\n\n/**\n * 获取开发者token成功，或者确定为云用户\n *\n * @const\n * @type {number}\n */\nconst STATUS_READY = 2;\n\n/**\n * 非法ak，sk\n *\n * @const\n * @type {number}\n */\nconst STATUS_ERROR = -1;\n\n /**\n * BaseClient类\n * 各具体接口类基类，处理鉴权逻辑等\n *\n * @constructor\n * @param {string} appid appid.\n * @param {string} ak The access key.\n * @param {string} sk The security key.\n */\nclass BaseClient {\n    constructor(appId, ak, sk, options) {\n        this.appId = 0;\n        this.ak = ak;\n        this.sk = sk;\n\n        this.options = options || {};\n\n        this.authType = AUTHTYPE_INIT;\n        this.status = STATUS_INIT;\n\n        this.pms;\n        this.devAccessToken = null;\n\n        this.devAuth = new DevAuth(this.ak, this.sk);\n\n        this.authTypeReq();\n\n    }\n    setAccessToken(token, expireTime) {\n        let et = expireTime || DevAuthToken.DEFAULT_EXPIRE_DURATION;\n        this.devAccessToken = new DevAuthToken(token, et, null);\n        this.authType = AUTHTYPE_DEV;\n        this.status = STATUS_READY;\n    }\n    authTypeReq() {\n        // 请求access_token服务\n        this.status = STATUS_AUTHTYPE_REQESTING;\n        this.pms = this.devAuth.getToken().then(this.gotDevAuthSuccess.bind(this),\n        this.gotDevAuthFail.bind(this));\n        // 初始化client对象后立即发生的第一次异常，如果没有立即调用具体请求接口的话（必须有promise catch）\n        // 将无法被捕获获取token的request网络异常，为了避免UnhandledPromiseRejectionWarning\n        // 此处直接catch住,待代用具体接口时候再返回获取token时的异常，减少程序复杂度\n        this.pms.catch(function (error) {\n        }.bind(this));\n        return this.pms;\n    }\n    gotDevAuthSuccess(token) {\n        // 如果用户没有手动调用setAccessToken设置access_token\n        if (this.authType !== AUTHTYPE_DEV) {\n            this.devAccessToken = token;\n            this.authType = AUTHTYPE_DEV_OR_BCE;\n        }\n        this.status = STATUS_READY;\n    }\n    gotDevAuthFail(err) {\n        // 获取token时鉴权服务器返回失败信息\n        if (err.errorType === DevAuth.EVENT_ERRTYPE_NORMAL) {\n            // 可能是百度云的ak，sk\n            this.authType = AUTHTYPE_BCE;\n            this.status = STATUS_READY;\n            return;\n        }\n\n        // 获取token时发生了网络错误\n        // 或者是发生了服务器返回数据格式异常\n        if (err.errorType === DevAuth.EVENT_ERRTYPE_NETWORK\n            || err.errorType === DevAuth.EVENT_ERRTYPE_ILLEGAL_RESPONSE) {\n            this.status = STATUS_ERROR;\n            throw err;\n        }\n    }\n    doRequest(requestInfo, httpClient) {\n\n        // 如果获取token失败\n        if (this.status === STATUS_ERROR) {\n            this.authTypeReq();\n        }\n\n        return this.pms.then(function () {\n            // 预检函数，返回是否token过期\n            let isTokenExpired = this.preRequest(requestInfo);\n\n            if (isTokenExpired === false) {\n                // 鉴权方式确定，请求接口\n                return httpClient.postWithInfo(requestInfo)\n            } else {\n                // 如果token过期了，说明是需要重新获取access_token\n                // 待重新获取完后继续请求接口\n                return this.pms.then(function () {\n                    this.preRequest(requestInfo);\n                    return httpClient.postWithInfo(requestInfo);\n                }.bind(this))\n            }\n        }.bind(this));\n    }\n    checkDevPermission(requestInfo) {\n        // 是否跳过这个检查（从speech.baidu.com创建的应用，调用语音接口需要跳过）\n        if (this.options.isSkipScopeCheck === true) {\n            return true;\n        }\n        // 检查是否拥有AI平台接口权限\n        return this.devAccessToken.hasScope(requestInfo.scope);\n    }\n    preRequest(requestInfo) {\n\n        // 获取access_token失败，使用百度云签名方式调用\n        if (this.authType === AUTHTYPE_BCE) {\n            requestInfo.makeBceOptions(this.ak, this.sk);\n            return false;\n        }\n\n        // 获取access_token成功，或者调用setAccessToken设置的access_token\n        if (this.authType === AUTHTYPE_DEV_OR_BCE || this.authType === AUTHTYPE_DEV) {\n            // 拥有AI平台接口权限\n            if (this.checkDevPermission(requestInfo) || this.authType === AUTHTYPE_DEV) {\n\n                // 判断access_token是否过期\n                if (!this.devAccessToken.isExpired()) {\n                    requestInfo.makeDevOptions(this.devAccessToken);\n                    return false;\n                }\n                // access_token过期重新获取\n                this.authTypeReq();\n                return true;\n            } else {\n                // 使用百度云签名方式访问调用\n                requestInfo.makeBceOptions(this.ak, this.sk);\n            }\n        }\n        return false;\n    }\n }\n\nmodule.exports = BaseClient;\n","'use strict';\n/**\n * Copyright (c) 2017 Baidu.com, Inc. All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations under the License.\n *\n * @file devAuth\n * @author baiduAip\n */\nconst HttpClient = require('../http/httpClient');\n\nconst DevAuthToken = require('./devAuthToken');\n\nconst objectTool = require('../util/objectTools');\n\nconst OPENAPI_TOKEN_URL = 'https://aip.baidubce.com/oauth/2.0/token';\n\nconst OPENAPI_GRANTTYPE_CLIENT = 'client_credentials';\n\nconst REQUEST_TOKEN_METHOD = 'post';\n /**\n * devAuth类\n * 百度开发者token获取类\n *\n * @constructor\n * @param {string} ak API Key.\n * @param {string} sk Secret Key.\n */\nclass DevAuth {\n    constructor(ak, sk) {\n        this.ak = ak;\n        this.sk = sk;\n        this.httpClient = new HttpClient();\n    }\n    gotData(data) {\n        // 如果返回数据非法，此时data为请求数据body\n        if (!objectTool.isObject(data)) {\n            throw {errorType: DevAuth.EVENT_ERRTYPE_ILLEGAL_RESPONSE, error: data};\n        }\n        // 如果获取token失败，数据是合法的错误数据\n        if (data.error) {\n            throw {errorType: DevAuth.EVENT_ERRTYPE_NORMAL, error: data.error};\n        } else {\n            // 获取token成功\n            return new DevAuthToken(data.access_token, data.expires_in, data.scope);\n        }\n    }\n    gotDataError(err) {\n        // request.js内部错误封装下返回\n        throw {\n            errorType: DevAuth.EVENT_ERRTYPE_NETWORK,\n            error: err\n        };\n    }\n    getToken() {\n        let options = {\n            url: OPENAPI_TOKEN_URL,\n            method: REQUEST_TOKEN_METHOD,\n            form: {\n                grant_type: OPENAPI_GRANTTYPE_CLIENT,\n                client_id: this.ak,\n                client_secret: this.sk\n            }\n        };\n        return this.httpClient.req(options).then(this.gotData.bind(this),\n            this.gotDataError.bind(this))\n    }\n}\n\nDevAuth.EVENT_ERRTYPE_ILLEGAL_RESPONSE = \"ERRTYPE_ILLEGAL_RESPONSE\";\n\nDevAuth.EVENT_ERRTYPE_NETWORK = \"ERRTYPE_NETWORK\";\n\nDevAuth.EVENT_ERRTYPE_NORMAL  = \"ERRTYPE_NORMAL\";\n\nmodule.exports = DevAuth;\n","'use strict';\n/**\n * Copyright (c) 2017 Baidu.com, Inc. All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations under the License.\n *\n * @file httpClient类\n * @author baiduAip\n */\nconst request = require('request');\nconst objectTools = require('../util/objectTools');\n\n/**\n * HttpClient类\n * 通用接口调用，依赖request库\n * @see https://github.com/request/request\n *\n * @class\n * @constructor\n */\nclass HttpClient {\n    constructor() {\n\n    }\n    postWithInfo(requestInfo) {\n        let options = {\n            method: requestInfo.method,\n            url: requestInfo.getUrl(),\n            headers: requestInfo.headers,\n            form: requestInfo.params,\n            timeout: HttpClient.DEFAULT_TIMEOUT\n        };\n\n        return this.req(options);\n    }\n    req(options) {\n        // 首先处理设置INTERCEPTOR的情况\n        if (objectTools.isFunction(HttpClient.REQUEST_INTERCEPTOR)) {\n            options = HttpClient.REQUEST_INTERCEPTOR(options);\n        // 其次设置全局request options的\n        } else if (objectTools.isObject(HttpClient.REQUEST_GLOBAL_OPTIONS)) {\n            options = objectTools.merge(HttpClient.REQUEST_GLOBAL_OPTIONS, options);\n        }\n\n        return new Promise(function(resolve, reject) {\n            request(options, function(error, response, body) {\n                if (error === null) {\n                    try {\n                        resolve(JSON.parse(body));\n                    } catch (e) {\n                        // 无法解析json请求，就返回原始body\n                        resolve(body);\n                    }\n                } else {\n                    reject(error);\n                }\n            });\n        });\n    }\n}\n\n/**\n * 用来设置request库的参数，会覆盖所有options，设置时请确保你知道它的作用\n * @see https://github.com/request/request#requestoptions-callback\n * @see https://github.com/request/request\n */\nHttpClient.setRequestOptions = function (options) {\n    HttpClient.REQUEST_GLOBAL_OPTIONS = options;\n}\n\n\n/**\n * 用来获取和设置request库的参数，会覆盖所有options，设置时请确保你知道它的作用\n * 优先级高于setRequestOptions\n *\n * @see https://github.com/request/request#requestoptions-callback\n * @see https://github.com/request/request\n */\nHttpClient.setRequestInterceptor = function (interceptorCallback) {\n    HttpClient.REQUEST_INTERCEPTOR = interceptorCallback;\n}\n\nHttpClient.REQUEST_GLOBAL_OPTIONS = null;\n\nHttpClient.REQUEST_INTERCEPTOR = null;\n\nHttpClient.DEFAULT_TIMEOUT = 10000;\n\nmodule.exports = HttpClient;","'use strict';\n/**\n * Copyright (c) 2017 Baidu.com, Inc. All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations under the License.\n *\n * @file objectTool\n * @author baiduAip\n */\n\nlet mergeTool = {\n    merge: function (source, dest) {\n        let merged = {};\n        for (let p in dest) {\n            merged[p] = dest[p];\n        }\n        for (let p in source) {\n            merged[p] = source[p];\n        }\n        return merged;\n    },\n    ensureArray: function (arrayLike) {\n        if (this.isArray(arrayLike)) {\n            return arrayLike;\n        } else {\n            return [arrayLike];\n        }\n    },\n    isArray: function (obj) {\n        return '[object Array]' === Object.prototype.toString.call(obj);\n    },\n    isObject: function (obj) {\n        return '[object Object]' === Object.prototype.toString.call(obj);\n    },\n    isFunction: function (obj) {\n        return '[object Function]' === Object.prototype.toString.call(obj);\n    }\n};\n\nmodule.exports = mergeTool;\n","'use strict';\n/**\n * Copyright (c) 2017 Baidu.com, Inc. All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations under the License.\n *\n * @file devAuthToken\n * @author baiduAip\n */\nconst devScope = require('../const/devScope');\n\n/**\n * 提前获取access_token的时间 默认24个小时\n *\n * @type {number}\n */\nlet DEFAULT_FETCH_AHEAD_DURATION = 24 * 60 * 60 * 1000;\n\n /**\n * devAuthToken类\n * 百度开发者token信息包装类\n *\n * @constructor\n * @param {string} token access_token\n * @param {number} expireTime 多久之后过期\n * @param {string} scope 权限\n */\nclass DevAuthToken {\n    constructor(token, expireTime, scope) {\n        this.token = token;\n        this.expireTime = expireTime;\n        this.scope = scope;\n        this.authDate = new Date();\n        this.hasScopeFlag = false;\n        this.initScope();\n    }\n    initScope() {\n        // 用户自建token，默认为有权限\n        if (this.scope == null) {\n            this.hasScopeFlag = true;\n            return;\n        }\n        let scopeArray = this.scope.split(' ');\n        scopeArray.forEach(function (item) {\n            if (item === devScope) {\n                this.hasScopeFlag = true;\n            }\n        }.bind(this));\n    }\n    hasScope(scope) {\n        return this.hasScopeFlag;\n    }\n    isExpired() {\n        let now = new Date();\n        // 根据服务器返回的access_token过期时间，提前重新获取token\n        if (now.getTime(this.expireTime) -\n            this.authDate.getTime() > this.expireTime * 1000 -\n                DEFAULT_FETCH_AHEAD_DURATION) {\n            return true;\n        }\n        return false;\n    }\n}\n\n/**\n * 设置提前获取access_token的时间\n */\nDevAuthToken.setExpireAhead = function (duration) {\n    DEFAULT_FETCH_AHEAD_DURATION = duration;\n}\n\nDevAuthToken.DEFAULT_EXPIRE_DURATION = 2592000 * 1000;\n\nmodule.exports = DevAuthToken;\n","'use strict';\n/**\n * Copyright (c) 2017 Baidu.com, Inc. All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations under the License.\n *\n * @file 百度开发者权限常量\n * @author baiduAip\n */\nconst devScope = 'brain_all_scope';\n\nmodule.exports = devScope;","'use strict';\n/**\n * Copyright (c) 2017 Baidu.com, Inc. All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations under the License.\n *\n * @file requestInfo\n * @author baiduAip\n */\nconst HttpHeader = require('../const/httpHeader');\n\nconst CloudAuth = require('../auth/cloudAuth');\n\nconst HOST_DEFAULT = 'aip.baidubce.com';\n\nconst CONTENT_TYPE_FORMDEFAULT = 'application/x-www-form-urlencoded';\n\nconst SYMBOL_QUERYSTRING_PREFIX = '?aipSdk=node&access_token=';\nconst SYMBOL_QUERYSTRING_PREFIX_BCE = '?aipSdk=node';\n\nconst SYMBOL_HTTPS_PREFIX = 'https://';\nconst SYMBOL_HTTP_PREFIX = 'http://';\n\n /**\n * RequestInfo类\n * 构造供request库调用的请求信息对象\n *\n * @constructor\n */\nclass RequestInfo {\n    constructor(path, params, method, isHttp, headers) {\n        this.isHttp = isHttp || false;\n        this.method = method;\n        this.host = HOST_DEFAULT;\n        this.path = path;\n        this.params = params;\n        this.createDate = new Date();\n        this.mergeHeaders = headers || {};\n        this.devAccessToken = null;\n        this.initCommonHeader();\n    }\n    setHost(host) {\n        this.host = host;\n        this.headers[HttpHeader.HOST] = this.host;\n    }\n    initCommonHeader() {\n        this.headers = {};\n        this.headers[HttpHeader.HOST] = this.host;\n        this.headers[HttpHeader.CONTENT_TYPE] = CONTENT_TYPE_FORMDEFAULT;\n        for (let p in this.mergeHeaders) {\n            this.headers[p] = this.mergeHeaders[p];\n        }\n    }\n    makeDevOptions(devAccessToken) {\n        this.devAccessToken = devAccessToken;\n        this.path += SYMBOL_QUERYSTRING_PREFIX + devAccessToken.token;\n    }\n    makeBceOptions(ak, sk) {\n        let cloudAuth = new CloudAuth(ak, sk);\n        this.headers[HttpHeader.BCE_DATE] = this.getUTCDateStr();\n        let signature = cloudAuth.getAuthorization(this.method,\n            this.path, {aipSdk: 'node'}, this.headers, this.createDate.getTime());\n        this.headers[HttpHeader.BCE_AUTHORIZATION] = signature;\n    }\n    getUTCDateStr() {\n        let dateStrUTC = this.createDate.toISOString().replace(/\\.\\d+Z$/, 'Z');\n        return dateStrUTC;\n    }\n    getAccessToken() {\n        if (this.devAccessToken !== null) {\n            return this.devAccessToken.token;\n        }\n        return null;\n    }\n    getUrl() {\n        if (this.isHttp) {\n            return this.getHttpUrl();\n        }\n        return this.getHttpsUrl();\n    }\n    getPureUrl() {\n        return this.getUrl().split('?')[0];\n    }\n    getHttpsUrl() {\n        return SYMBOL_HTTPS_PREFIX + this.host + this.path + SYMBOL_QUERYSTRING_PREFIX_BCE;\n    }\n    getHttpUrl() {\n        return SYMBOL_HTTP_PREFIX + this.host + this.path + SYMBOL_QUERYSTRING_PREFIX_BCE;\n    }\n }\n\nmodule.exports = RequestInfo;\n","'use strict';\n/**\n * Copyright (c) 2017 Baidu.com, Inc. All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations under the License.\n *\n * @file http头常量\n * @author baiduAip\n */\nconst httpHeader = {\n    BCE_DATE: 'x-bce-date',\n    HOST: 'Host',\n    BCE_AUTHORIZATION: 'authorization',\n    CONTENT_TYPE: 'Content-Type'\n};\n\nmodule.exports = Object.freeze(httpHeader);","'use strict';\n/**\n * Copyright (c) 2017 Baidu.com, Inc. All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations under the License.\n *\n * @file cloudAuth\n * @author baiduAip\n */\nconst BceAuth = require('./bceAuth/auth');\n\n /**\n * CloudAuth类\n *\n * 百度云鉴权签名类，依赖百度云签名实现(bceAuth目录)\n * @see https://github.com/baidubce/bce-sdk-js\n * @see http://gollum.baidu.com/AuthenticationMechanism#生成CanonicalQueryString\n * @constructor\n * @param {string} ak The access key.\n * @param {string} sk The security key.\n */\nclass CloudAuth {\n    constructor(ak, sk) {\n        this.ak = ak;\n        this.sk = sk;\n        this.authProxy = new BceAuth(ak, sk);\n    }\n    getAuthorization(method, uri, params, headers, time) {\n        return this.authProxy.generateAuthorization(method, uri, params, headers, time / 1000);\n    }\n }\n\nmodule.exports = CloudAuth;\n","/**\n * Copyright (c) 2014 Baidu.com, Inc. All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations under the License.\n *\n * @file src/auth.js\n * @author leeight\n */\n\n/* eslint-env node */\n/* eslint max-params:[0,10] */\n\nvar util = require('util');\nvar u = require('underscore');\n\nvar debug = require('debug')('bce-sdk:auth');\n\nvar H = require('./headers');\nvar strings = require('./strings');\n\n/**\n * Auth\n *\n * @constructor\n * @param {string} ak The access key.\n * @param {string} sk The security key.\n */\nfunction Auth(ak, sk) {\n    this.ak = ak;\n    this.sk = sk;\n}\n\n/**\n * Generate the signature based on http://gollum.baidu.com/AuthenticationMechanism\n *\n * @param {string} method The http request method, such as GET, POST, DELETE, PUT, ...\n * @param {string} resource The request path.\n * @param {Object=} params The query strings.\n * @param {Object=} headers The http request headers.\n * @param {number=} timestamp Set the current timestamp.\n * @param {number=} expirationInSeconds The signature validation time.\n * @param {Array.<string>=} headersToSign The request headers list which will be used to calcualate the signature.\n *\n * @return {string} The signature.\n */\nAuth.prototype.generateAuthorization = function (method, resource, params,\n                                                 headers, timestamp, expirationInSeconds, headersToSign) {\n\n    var now = timestamp ? new Date(timestamp * 1000) : new Date();\n    var rawSessionKey = util.format('bce-auth-v1/%s/%s/%d',\n        this.ak, now.toISOString().replace(/\\.\\d+Z$/, 'Z'), expirationInSeconds || 1800);\n    debug('rawSessionKey = %j', rawSessionKey);\n    var sessionKey = this.hash(rawSessionKey, this.sk);\n\n    var canonicalUri = this.uriCanonicalization(resource);\n    var canonicalQueryString = this.queryStringCanonicalization(params || {});\n\n    var rv = this.headersCanonicalization(headers || {}, headersToSign);\n    var canonicalHeaders = rv[0];\n    var signedHeaders = rv[1];\n    debug('canonicalUri = %j', canonicalUri);\n    debug('canonicalQueryString = %j', canonicalQueryString);\n    debug('canonicalHeaders = %j', canonicalHeaders);\n    debug('signedHeaders = %j', signedHeaders);\n\n    var rawSignature = util.format('%s\\n%s\\n%s\\n%s',\n        method, canonicalUri, canonicalQueryString, canonicalHeaders);\n    debug('rawSignature = %j', rawSignature);\n    debug('sessionKey = %j', sessionKey);\n    var signature = this.hash(rawSignature, sessionKey);\n\n    if (signedHeaders.length) {\n        return util.format('%s/%s/%s', rawSessionKey, signedHeaders.join(';'), signature);\n    }\n\n    return util.format('%s//%s', rawSessionKey, signature);\n};\n\nAuth.prototype.uriCanonicalization = function (uri) {\n    return uri;\n};\n\n/**\n * Canonical the query strings.\n *\n * @see http://gollum.baidu.com/AuthenticationMechanism#生成CanonicalQueryString\n * @param {Object} params The query strings.\n * @return {string}\n */\nAuth.prototype.queryStringCanonicalization = function (params) {\n    var canonicalQueryString = [];\n    Object.keys(params).forEach(function (key) {\n        if (key.toLowerCase() === H.AUTHORIZATION.toLowerCase()) {\n            return;\n        }\n\n        var value = params[key] == null ? '' : params[key];\n        canonicalQueryString.push(key + '=' + strings.normalize(value));\n    });\n\n    canonicalQueryString.sort();\n\n    return canonicalQueryString.join('&');\n};\n\n/**\n * Canonical the http request headers.\n *\n * @see http://gollum.baidu.com/AuthenticationMechanism#生成CanonicalHeaders\n * @param {Object} headers The http request headers.\n * @param {Array.<string>=} headersToSign The request headers list which will be used to calcualate the signature.\n * @return {*} canonicalHeaders and signedHeaders\n */\nAuth.prototype.headersCanonicalization = function (headers, headersToSign) {\n    if (!headersToSign || !headersToSign.length) {\n        headersToSign = [H.HOST, H.CONTENT_MD5, H.CONTENT_LENGTH, H.CONTENT_TYPE];\n    }\n    debug('headers = %j, headersToSign = %j', headers, headersToSign);\n\n    var headersMap = {};\n    headersToSign.forEach(function (item) {\n        headersMap[item.toLowerCase()] = true;\n    });\n\n    var canonicalHeaders = [];\n    Object.keys(headers).forEach(function (key) {\n        var value = headers[key];\n        value = u.isString(value) ? strings.trim(value) : value;\n        if (value == null || value === '') {\n            return;\n        }\n        key = key.toLowerCase();\n        if (/^x\\-bce\\-/.test(key) || headersMap[key] === true) {\n            canonicalHeaders.push(util.format('%s:%s',\n                // encodeURIComponent(key), encodeURIComponent(value)));\n                strings.normalize(key), strings.normalize(value)));\n        }\n    });\n\n    canonicalHeaders.sort();\n\n    var signedHeaders = [];\n    canonicalHeaders.forEach(function (item) {\n        signedHeaders.push(item.split(':')[0]);\n    });\n\n    return [canonicalHeaders.join('\\n'), signedHeaders];\n};\n\nAuth.prototype.hash = function (data, key) {\n    var crypto = require('crypto');\n    var sha256Hmac = crypto.createHmac('sha256', key);\n    sha256Hmac.update(data);\n    return sha256Hmac.digest('hex');\n};\n\nmodule.exports = Auth;\n\n","/**\n * Copyright (c) 2014 Baidu.com, Inc. All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations under the License.\n *\n * @file src/headers.js\n * @author leeight\n */\n\n/* eslint-env node */\n\nexports.CONTENT_TYPE = 'Content-Type';\nexports.CONTENT_LENGTH = 'Content-Length';\nexports.CONTENT_MD5 = 'Content-MD5';\nexports.CONTENT_ENCODING = 'Content-Encoding';\nexports.CONTENT_DISPOSITION = 'Content-Disposition';\nexports.ETAG = 'ETag';\nexports.CONNECTION = 'Connection';\nexports.HOST = 'Host';\nexports.USER_AGENT = 'User-Agent';\nexports.CACHE_CONTROL = 'Cache-Control';\nexports.EXPIRES = 'Expires';\n\nexports.AUTHORIZATION = 'Authorization';\nexports.X_BCE_DATE = 'x-bce-date';\nexports.X_BCE_ACL = 'x-bce-acl';\nexports.X_BCE_REQUEST_ID = 'x-bce-request-id';\nexports.X_BCE_CONTENT_SHA256 = 'x-bce-content-sha256';\nexports.X_BCE_OBJECT_ACL = 'x-bce-object-acl';\nexports.X_BCE_OBJECT_GRANT_READ = 'x-bce-object-grant-read';\n\nexports.X_HTTP_HEADERS = 'http_headers';\nexports.X_BODY = 'body';\nexports.X_STATUS_CODE = 'status_code';\nexports.X_MESSAGE = 'message';\nexports.X_CODE = 'code';\nexports.X_REQUEST_ID = 'request_id';\n\nexports.SESSION_TOKEN = 'x-bce-security-token';\n\nexports.X_VOD_MEDIA_TITLE = 'x-vod-media-title';\nexports.X_VOD_MEDIA_DESCRIPTION = 'x-vod-media-description';\nexports.ACCEPT_ENCODING = 'accept-encoding';\nexports.ACCEPT = 'accept';\n\n\n\n\n\n\n\n\n\n\n\n","/**\n * Copyright (c) 2014 Baidu.com, Inc. All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations under the License.\n *\n * @file strings.js\n * @author leeight\n */\n\nvar kEscapedMap = {\n    '!': '%21',\n    '\\'': '%27',\n    '(': '%28',\n    ')': '%29',\n    '*': '%2A'\n};\n\nexports.normalize = function (string, encodingSlash) {\n    var result = encodeURIComponent(string);\n    result = result.replace(/[!'\\(\\)\\*]/g, function ($1) {\n        return kEscapedMap[$1];\n    });\n\n    if (encodingSlash === false) {\n        result = result.replace(/%2F/gi, '/');\n    }\n\n    return result;\n};\n\nexports.trim = function (string) {\n    return (string || '').replace(/^\\s+|\\s+$/g, '');\n};\n\n","/**\n * Copyright (c) 2014 Baidu.com, Inc. All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations under the License.\n *\n * @file src/crypto.js\n * @author leeight\n */\n\n/* eslint-env node */\n\nvar fs = require('fs');\nvar crypto = require('crypto');\n\nvar Q = require('q');\n\nexports.md5sum = function (data, enc, digest) {\n    if (!Buffer.isBuffer(data)) {\n        data = new Buffer(data, enc || 'UTF-8');\n    }\n\n    var md5 = crypto.createHash('md5');\n    md5.update(data);\n\n    return md5.digest(digest || 'base64');\n};\n\nexports.md5stream = function (stream, digest) {\n    var deferred = Q.defer();\n\n    var md5 = crypto.createHash('md5');\n    stream.on('data', function (chunk) {\n        md5.update(chunk);\n    });\n    stream.on('end', function () {\n        deferred.resolve(md5.digest(digest || 'base64'));\n    });\n    stream.on('error', function (error) {\n        deferred.reject(error);\n    });\n\n    return deferred.promise;\n};\n\nexports.md5file = function (filename, digest) {\n    return exports.md5stream(fs.createReadStream(filename), digest);\n};\n\nexports.md5blob = function (blob, digest) {\n    var deferred = Q.defer();\n\n    var reader = new FileReader();\n    reader.readAsArrayBuffer(blob);\n    reader.onerror = function (e) {\n        deferred.reject(reader.error);\n    };\n    reader.onloadend = function (e) {\n        if (e.target.readyState === FileReader.DONE) {\n            var content = e.target.result;\n            var md5 = exports.md5sum(content, null, digest);\n            deferred.resolve(md5);\n        }\n    };\n    return deferred.promise;\n};\n\n\n\n\n\n\n\n\n\n\n","'use strict';\n/**\n * Copyright (c) 2017 Baidu.com, Inc. All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations under the License.\n *\n * @file AipImageSearch.js\n * @author baidu aip\n */\n\nconst BaseClient = require('./client/baseClient');\n\nconst RequestInfo = require('./client/requestInfo');\n\nconst HttpClient = require('./http/httpClient');\n\nconst objectTools = require('./util/objectTools');\n\nconst METHOD_POST = 'POST';\n\nconst SAME_HQ_ADD_PATH = '/rest/2.0/realtime_search/same_hq/add';\nconst SAME_HQ_SEARCH_PATH = '/rest/2.0/realtime_search/same_hq/search';\nconst SAME_HQ_UPDATE_PATH = '/rest/2.0/realtime_search/same_hq/update';\nconst SAME_HQ_DELETE_PATH = '/rest/2.0/realtime_search/same_hq/delete';\nconst SIMILAR_ADD_PATH = '/rest/2.0/image-classify/v1/realtime_search/similar/add';\nconst SIMILAR_SEARCH_PATH = '/rest/2.0/image-classify/v1/realtime_search/similar/search';\nconst SIMILAR_UPDATE_PATH = '/rest/2.0/image-classify/v1/realtime_search/similar/update';\nconst SIMILAR_DELETE_PATH = '/rest/2.0/image-classify/v1/realtime_search/similar/delete';\nconst PRODUCT_ADD_PATH = '/rest/2.0/image-classify/v1/realtime_search/product/add';\nconst PRODUCT_SEARCH_PATH = '/rest/2.0/image-classify/v1/realtime_search/product/search';\nconst PRODUCT_UPDATE_PATH = '/rest/2.0/image-classify/v1/realtime_search/product/update';\nconst PRODUCT_DELETE_PATH = '/rest/2.0/image-classify/v1/realtime_search/product/delete';\n\n\n/**\n * AipImageSearch类\n *\n * @class\n * @extends BaseClient\n * @constructor\n * @param {string} appid appid.\n * @param {string} ak  access key.\n * @param {string} sk  security key.\n */\nclass AipImageSearch extends BaseClient {\n    constructor(appId, ak, sk) {\n        super(appId, ak, sk);\n    }\n    commonImpl(param) {\n        let httpClient = new HttpClient();\n        let apiUrl = param.targetPath;\n        delete param.targetPath;\n        let requestInfo = new RequestInfo(apiUrl,\n            param, METHOD_POST);\n        return this.doRequest(requestInfo, httpClient);\n    }\n\n    /**\n     * 相同图检索—入库接口\n     *\n     * @param {string} image - 图像数据，base64编码，要求base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     *   brief 检索时原样带回,最长256B。\n     *   tags 1 - 65535范围内的整数，tag间以逗号分隔，最多2个tag。样例：\"100,11\" ；检索时可圈定分类维度进行检索\n     * @return {Promise} - 标准Promise对象\n     */\n    sameHqAdd(image, options) {\n        let param = {\n            image: image,\n            targetPath: SAME_HQ_ADD_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 相同图检索—入库接口\n     *\n     * @param {string} url - 图片完整URL，URL长度不超过1024字节，URL对应的图片base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式，当image字段存在时url字段失效\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     *   brief 检索时原样带回,最长256B。\n     *   tags 1 - 65535范围内的整数，tag间以逗号分隔，最多2个tag。样例：\"100,11\" ；检索时可圈定分类维度进行检索\n     * @return {Promise} - 标准Promise对象\n     */\n    sameHqAddUrl(url, options) {\n        let param = {\n            url: url,\n            targetPath: SAME_HQ_ADD_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 相同图检索—检索接口\n     *\n     * @param {string} image - 图像数据，base64编码，要求base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     *   tags 1 - 65535范围内的整数，tag间以逗号分隔，最多2个tag。样例：\"100,11\" ；检索时可圈定分类维度进行检索\n     *   tag_logic 检索时tag之间的逻辑， 0：逻辑and，1：逻辑or\n     *   pn 分页功能，起始位置，例：0。未指定分页时，默认返回前300个结果；接口返回数量最大限制1000条，例如：起始位置为900，截取条数500条，接口也只返回第900 - 1000条的结果，共计100条\n     *   rn 分页功能，截取条数，例：250\n     * @return {Promise} - 标准Promise对象\n     */\n    sameHqSearch(image, options) {\n        let param = {\n            image: image,\n            targetPath: SAME_HQ_SEARCH_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 相同图检索—检索接口\n     *\n     * @param {string} url - 图片完整URL，URL长度不超过1024字节，URL对应的图片base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式，当image字段存在时url字段失效\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     *   tags 1 - 65535范围内的整数，tag间以逗号分隔，最多2个tag。样例：\"100,11\" ；检索时可圈定分类维度进行检索\n     *   tag_logic 检索时tag之间的逻辑， 0：逻辑and，1：逻辑or\n     *   pn 分页功能，起始位置，例：0。未指定分页时，默认返回前300个结果；接口返回数量最大限制1000条，例如：起始位置为900，截取条数500条，接口也只返回第900 - 1000条的结果，共计100条\n     *   rn 分页功能，截取条数，例：250\n     * @return {Promise} - 标准Promise对象\n     */\n    sameHqSearchUrl(url, options) {\n        let param = {\n            url: url,\n            targetPath: SAME_HQ_SEARCH_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 相同图检索—更新接口\n     *\n     * @param {string} image - 图像数据，base64编码，要求base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     *   brief 更新的摘要信息，最长256B。样例：{\"name\":\"周杰伦\", \"id\":\"666\"}\n     *   tags 1 - 65535范围内的整数，tag间以逗号分隔，最多2个tag。样例：\"100,11\" ；检索时可圈定分类维度进行检索\n     * @return {Promise} - 标准Promise对象\n     */\n    sameHqUpdate(image, options) {\n        let param = {\n            image: image,\n            targetPath: SAME_HQ_UPDATE_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 相同图检索—更新接口\n     *\n     * @param {string} url - 图片完整URL，URL长度不超过1024字节，URL对应的图片base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式，当image字段存在时url字段失效\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     *   brief 更新的摘要信息，最长256B。样例：{\"name\":\"周杰伦\", \"id\":\"666\"}\n     *   tags 1 - 65535范围内的整数，tag间以逗号分隔，最多2个tag。样例：\"100,11\" ；检索时可圈定分类维度进行检索\n     * @return {Promise} - 标准Promise对象\n     */\n    sameHqUpdateUrl(url, options) {\n        let param = {\n            url: url,\n            targetPath: SAME_HQ_UPDATE_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 相同图检索—更新接口\n     *\n     * @param {string} contSign - 图片签名\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     *   brief 更新的摘要信息，最长256B。样例：{\"name\":\"周杰伦\", \"id\":\"666\"}\n     *   tags 1 - 65535范围内的整数，tag间以逗号分隔，最多2个tag。样例：\"100,11\" ；检索时可圈定分类维度进行检索\n     * @return {Promise} - 标准Promise对象\n     */\n    sameHqUpdateContSign(contSign, options) {\n        let param = {\n            cont_sign: contSign,\n            targetPath: SAME_HQ_UPDATE_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 相同图检索—删除接口\n     *\n     * @param {string} image - 图像数据，base64编码，要求base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     * @return {Promise} - 标准Promise对象\n     */\n    sameHqDeleteByImage(image, options) {\n        let param = {\n            image: image,\n            targetPath: SAME_HQ_DELETE_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 相同图检索—删除接口\n     *\n     * @param {string} url - 图片完整URL，URL长度不超过1024字节，URL对应的图片base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式，当image字段存在时url字段失效\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     * @return {Promise} - 标准Promise对象\n     */\n    sameHqDeleteByUrl(url, options) {\n        let param = {\n            url: url,\n            targetPath: SAME_HQ_DELETE_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 相同图检索—删除接口\n     *\n     * @param {string} contSign - 图片签名\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     * @return {Promise} - 标准Promise对象\n     */\n    sameHqDeleteBySign(contSign, options) {\n        let param = {\n            cont_sign: contSign,\n            targetPath: SAME_HQ_DELETE_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 相似图检索—入库接口\n     *\n     * @param {string} image - 图像数据，base64编码，要求base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     *   brief 检索时原样带回,最长256B。\n     *   tags 1 - 65535范围内的整数，tag间以逗号分隔，最多2个tag。样例：\"100,11\" ；检索时可圈定分类维度进行检索\n     * @return {Promise} - 标准Promise对象\n     */\n    similarAdd(image, options) {\n        let param = {\n            image: image,\n            targetPath: SIMILAR_ADD_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 相似图检索—入库接口\n     *\n     * @param {string} url - 图片完整URL，URL长度不超过1024字节，URL对应的图片base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式，当image字段存在时url字段失效\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     *   brief 检索时原样带回,最长256B。\n     *   tags 1 - 65535范围内的整数，tag间以逗号分隔，最多2个tag。样例：\"100,11\" ；检索时可圈定分类维度进行检索\n     * @return {Promise} - 标准Promise对象\n     */\n    similarAddUrl(url, options) {\n        let param = {\n            url: url,\n            targetPath: SIMILAR_ADD_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 相似图检索—检索接口\n     *\n     * @param {string} image - 图像数据，base64编码，要求base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     *   tags 1 - 65535范围内的整数，tag间以逗号分隔，最多2个tag。样例：\"100,11\" ；检索时可圈定分类维度进行检索\n     *   tag_logic 检索时tag之间的逻辑， 0：逻辑and，1：逻辑or\n     *   pn 分页功能，起始位置，例：0。未指定分页时，默认返回前300个结果；接口返回数量最大限制1000条，例如：起始位置为900，截取条数500条，接口也只返回第900 - 1000条的结果，共计100条\n     *   rn 分页功能，截取条数，例：250\n     * @return {Promise} - 标准Promise对象\n     */\n    similarSearch(image, options) {\n        let param = {\n            image: image,\n            targetPath: SIMILAR_SEARCH_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 相似图检索—检索接口\n     *\n     * @param {string} url - 图片完整URL，URL长度不超过1024字节，URL对应的图片base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式，当image字段存在时url字段失效\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     *   tags 1 - 65535范围内的整数，tag间以逗号分隔，最多2个tag。样例：\"100,11\" ；检索时可圈定分类维度进行检索\n     *   tag_logic 检索时tag之间的逻辑， 0：逻辑and，1：逻辑or\n     *   pn 分页功能，起始位置，例：0。未指定分页时，默认返回前300个结果；接口返回数量最大限制1000条，例如：起始位置为900，截取条数500条，接口也只返回第900 - 1000条的结果，共计100条\n     *   rn 分页功能，截取条数，例：250\n     * @return {Promise} - 标准Promise对象\n     */\n    similarSearchUrl(url, options) {\n        let param = {\n            url: url,\n            targetPath: SIMILAR_SEARCH_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 相似图检索—更新接口\n     *\n     * @param {string} image - 图像数据，base64编码，要求base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     *   brief 更新的摘要信息，最长256B。样例：{\"name\":\"周杰伦\", \"id\":\"666\"}\n     *   tags 1 - 65535范围内的整数，tag间以逗号分隔，最多2个tag。样例：\"100,11\" ；检索时可圈定分类维度进行检索\n     * @return {Promise} - 标准Promise对象\n     */\n    similarUpdate(image, options) {\n        let param = {\n            image: image,\n            targetPath: SIMILAR_UPDATE_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 相似图检索—更新接口\n     *\n     * @param {string} url - 图片完整URL，URL长度不超过1024字节，URL对应的图片base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式，当image字段存在时url字段失效\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     *   brief 更新的摘要信息，最长256B。样例：{\"name\":\"周杰伦\", \"id\":\"666\"}\n     *   tags 1 - 65535范围内的整数，tag间以逗号分隔，最多2个tag。样例：\"100,11\" ；检索时可圈定分类维度进行检索\n     * @return {Promise} - 标准Promise对象\n     */\n    similarUpdateUrl(url, options) {\n        let param = {\n            url: url,\n            targetPath: SIMILAR_UPDATE_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 相似图检索—更新接口\n     *\n     * @param {string} contSign - 图片签名\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     *   brief 更新的摘要信息，最长256B。样例：{\"name\":\"周杰伦\", \"id\":\"666\"}\n     *   tags 1 - 65535范围内的整数，tag间以逗号分隔，最多2个tag。样例：\"100,11\" ；检索时可圈定分类维度进行检索\n     * @return {Promise} - 标准Promise对象\n     */\n    similarUpdateContSign(contSign, options) {\n        let param = {\n            cont_sign: contSign,\n            targetPath: SIMILAR_UPDATE_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 相似图检索—删除接口\n     *\n     * @param {string} image - 图像数据，base64编码，要求base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     * @return {Promise} - 标准Promise对象\n     */\n    similarDeleteByImage(image, options) {\n        let param = {\n            image: image,\n            targetPath: SIMILAR_DELETE_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 相似图检索—删除接口\n     *\n     * @param {string} url - 图片完整URL，URL长度不超过1024字节，URL对应的图片base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式，当image字段存在时url字段失效\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     * @return {Promise} - 标准Promise对象\n     */\n    similarDeleteByUrl(url, options) {\n        let param = {\n            url: url,\n            targetPath: SIMILAR_DELETE_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 相似图检索—删除接口\n     *\n     * @param {string} contSign - 图片签名\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     * @return {Promise} - 标准Promise对象\n     */\n    similarDeleteBySign(contSign, options) {\n        let param = {\n            cont_sign: contSign,\n            targetPath: SIMILAR_DELETE_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 商品检索—入库接口\n     *\n     * @param {string} image - 图像数据，base64编码，要求base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     *   brief 检索时原样带回,最长256B。**请注意，检索接口不返回原图，仅反馈当前填写的brief信息，所以调用该入库接口时，brief信息请尽量填写可关联至本地图库的图片id或者图片url、图片名称等信息**\n     *   class_id1 商品分类维度1，支持1-60范围内的整数。检索时可圈定该分类维度进行检索\n     *   class_id2 商品分类维度1，支持1-60范围内的整数。检索时可圈定该分类维度进行检索\n     * @return {Promise} - 标准Promise对象\n     */\n    productAdd(image, options) {\n        let param = {\n            image: image,\n            targetPath: PRODUCT_ADD_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 商品检索—入库接口\n     *\n     * @param {string} url - 图片完整URL，URL长度不超过1024字节，URL对应的图片base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式，当image字段存在时url字段失效\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     *   brief 检索时原样带回,最长256B。**请注意，检索接口不返回原图，仅反馈当前填写的brief信息，所以调用该入库接口时，brief信息请尽量填写可关联至本地图库的图片id或者图片url、图片名称等信息**\n     *   class_id1 商品分类维度1，支持1-60范围内的整数。检索时可圈定该分类维度进行检索\n     *   class_id2 商品分类维度1，支持1-60范围内的整数。检索时可圈定该分类维度进行检索\n     * @return {Promise} - 标准Promise对象\n     */\n    productAddUrl(url, options) {\n        let param = {\n            url: url,\n            targetPath: PRODUCT_ADD_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 商品检索—检索接口\n     *\n     * @param {string} image - 图像数据，base64编码，要求base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     *   class_id1 商品分类维度1，支持1-60范围内的整数。检索时可圈定该分类维度进行检索\n     *   class_id2 商品分类维度1，支持1-60范围内的整数。检索时可圈定该分类维度进行检索\n     *   pn 分页功能，起始位置，例：0。未指定分页时，默认返回前300个结果；接口返回数量最大限制1000条，例如：起始位置为900，截取条数500条，接口也只返回第900 - 1000条的结果，共计100条\n     *   rn 分页功能，截取条数，例：250\n     * @return {Promise} - 标准Promise对象\n     */\n    productSearch(image, options) {\n        let param = {\n            image: image,\n            targetPath: PRODUCT_SEARCH_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 商品检索—检索接口\n     *\n     * @param {string} url - 图片完整URL，URL长度不超过1024字节，URL对应的图片base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式，当image字段存在时url字段失效\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     *   class_id1 商品分类维度1，支持1-60范围内的整数。检索时可圈定该分类维度进行检索\n     *   class_id2 商品分类维度1，支持1-60范围内的整数。检索时可圈定该分类维度进行检索\n     *   pn 分页功能，起始位置，例：0。未指定分页时，默认返回前300个结果；接口返回数量最大限制1000条，例如：起始位置为900，截取条数500条，接口也只返回第900 - 1000条的结果，共计100条\n     *   rn 分页功能，截取条数，例：250\n     * @return {Promise} - 标准Promise对象\n     */\n    productSearchUrl(url, options) {\n        let param = {\n            url: url,\n            targetPath: PRODUCT_SEARCH_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 商品检索—更新接口\n     *\n     * @param {string} image - 图像数据，base64编码，要求base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     *   brief 更新的摘要信息，最长256B。样例：{\"name\":\"周杰伦\", \"id\":\"666\"}\n     *   class_id1 更新的商品分类1，支持1-60范围内的整数。\n     *   class_id2 更新的商品分类2，支持1-60范围内的整数。\n     * @return {Promise} - 标准Promise对象\n     */\n    productUpdate(image, options) {\n        let param = {\n            image: image,\n            targetPath: PRODUCT_UPDATE_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 商品检索—更新接口\n     *\n     * @param {string} url - 图片完整URL，URL长度不超过1024字节，URL对应的图片base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式，当image字段存在时url字段失效\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     *   brief 更新的摘要信息，最长256B。样例：{\"name\":\"周杰伦\", \"id\":\"666\"}\n     *   class_id1 更新的商品分类1，支持1-60范围内的整数。\n     *   class_id2 更新的商品分类2，支持1-60范围内的整数。\n     * @return {Promise} - 标准Promise对象\n     */\n    productUpdateUrl(url, options) {\n        let param = {\n            url: url,\n            targetPath: PRODUCT_UPDATE_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 商品检索—更新接口\n     *\n     * @param {string} contSign - 图片签名\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     *   brief 更新的摘要信息，最长256B。样例：{\"name\":\"周杰伦\", \"id\":\"666\"}\n     *   class_id1 更新的商品分类1，支持1-60范围内的整数。\n     *   class_id2 更新的商品分类2，支持1-60范围内的整数。\n     * @return {Promise} - 标准Promise对象\n     */\n    productUpdate(contSign, options) {\n        let param = {\n            cont_sign: contSign,\n            targetPath: PRODUCT_UPDATE_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 商品检索—删除接口\n     *\n     * @param {string} image - 图像数据，base64编码，要求base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     * @return {Promise} - 标准Promise对象\n     */\n    productDeleteByImage(image, options) {\n        let param = {\n            image: image,\n            targetPath: PRODUCT_DELETE_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 商品检索—删除接口\n     *\n     * @param {string} url - 图片完整URL，URL长度不超过1024字节，URL对应的图片base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式，当image字段存在时url字段失效\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     * @return {Promise} - 标准Promise对象\n     */\n    productDeleteByUrl(url, options) {\n        let param = {\n            url: url,\n            targetPath: PRODUCT_DELETE_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 商品检索—删除接口\n     *\n     * @param {string} contSign - 图片签名\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     * @return {Promise} - 标准Promise对象\n     */\n    productDeleteBySign(contSign, options) {\n        let param = {\n            cont_sign: contSign,\n            targetPath: PRODUCT_DELETE_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n}\n\nmodule.exports = AipImageSearch;\n\n","'use strict';\n/**\n * Copyright (c) 2017 Baidu.com, Inc. All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations under the License.\n *\n * @file AipImageClassify.js\n * @author baidu aip\n */\n\nconst BaseClient = require('./client/baseClient');\n\nconst RequestInfo = require('./client/requestInfo');\n\nconst HttpClient = require('./http/httpClient');\n\nconst objectTools = require('./util/objectTools');\n\nconst METHOD_POST = 'POST';\n\nconst ADVANCED_GENERAL_PATH = '/rest/2.0/image-classify/v2/advanced_general';\nconst DISH_DETECT_PATH = '/rest/2.0/image-classify/v2/dish';\nconst CAR_DETECT_PATH = '/rest/2.0/image-classify/v1/car';\nconst LOGO_SEARCH_PATH = '/rest/2.0/image-classify/v2/logo';\nconst LOGO_ADD_PATH = '/rest/2.0/realtime_search/v1/logo/add';\nconst LOGO_DELETE_PATH = '/rest/2.0/realtime_search/v1/logo/delete';\nconst ANIMAL_DETECT_PATH = '/rest/2.0/image-classify/v1/animal';\nconst PLANT_DETECT_PATH = '/rest/2.0/image-classify/v1/plant';\nconst OBJECT_DETECT_PATH = '/rest/2.0/image-classify/v1/object_detect';\nconst LANDMARK_PATH = '/rest/2.0/image-classify/v1/landmark';\n\n\n/**\n * AipImageClassify类\n *\n * @class\n * @extends BaseClient\n * @constructor\n * @param {string} appid appid.\n * @param {string} ak  access key.\n * @param {string} sk  security key.\n */\nclass AipImageClassify extends BaseClient {\n    constructor(appId, ak, sk) {\n        super(appId, ak, sk);\n    }\n    commonImpl(param) {\n        let httpClient = new HttpClient();\n        let apiUrl = param.targetPath;\n        delete param.targetPath;\n        let requestInfo = new RequestInfo(apiUrl,\n            param, METHOD_POST);\n        return this.doRequest(requestInfo, httpClient);\n    }\n\n    /**\n     * 通用物体识别接口\n     *\n     * @param {string} image - 图像数据，base64编码，要求base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     *   baike_num 返回百科信息的结果数，默认不返回\n     * @return {Promise} - 标准Promise对象\n     */\n    advancedGeneral(image, options) {\n        let param = {\n            image: image,\n            targetPath: ADVANCED_GENERAL_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 菜品识别接口\n     *\n     * @param {string} image - 图像数据，base64编码，要求base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     *   top_num 返回预测得分top结果数，默认为5\n     *   filter_threshold 默认0.95，可以通过该参数调节识别效果，降低非菜识别率.\n     *   baike_num 返回百科信息的结果数，默认不返回\n     * @return {Promise} - 标准Promise对象\n     */\n    dishDetect(image, options) {\n        let param = {\n            image: image,\n            targetPath: DISH_DETECT_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 车辆识别接口\n     *\n     * @param {string} image - 图像数据，base64编码，要求base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     *   top_num 返回预测得分top结果数，默认为5\n     *   baike_num 返回百科信息的结果数，默认不返回\n     * @return {Promise} - 标准Promise对象\n     */\n    carDetect(image, options) {\n        let param = {\n            image: image,\n            targetPath: CAR_DETECT_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * logo商标识别接口\n     *\n     * @param {string} image - 图像数据，base64编码，要求base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     *   custom_lib 是否只使用自定义logo库的结果，默认false：返回自定义库+默认库的识别结果\n     * @return {Promise} - 标准Promise对象\n     */\n    logoSearch(image, options) {\n        let param = {\n            image: image,\n            targetPath: LOGO_SEARCH_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * logo商标识别—添加接口\n     *\n     * @param {string} image - 图像数据，base64编码，要求base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式\n     * @param {string} brief - brief，检索时带回。此处要传对应的name与code字段，name长度小于100B，code长度小于150B\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     * @return {Promise} - 标准Promise对象\n     */\n    logoAdd(image, brief, options) {\n        let param = {\n            image: image,\n            brief: brief,\n            targetPath: LOGO_ADD_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * logo商标识别—删除接口\n     *\n     * @param {string} image - 图像数据，base64编码，要求base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     * @return {Promise} - 标准Promise对象\n     */\n    logoDeleteByImage(image, options) {\n        let param = {\n            image: image,\n            targetPath: LOGO_DELETE_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * logo商标识别—删除接口\n     *\n     * @param {string} contSign - 图片签名（和image二选一，image优先级更高）\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     * @return {Promise} - 标准Promise对象\n     */\n    logoDeleteBySign(contSign, options) {\n        let param = {\n            cont_sign: contSign,\n            targetPath: LOGO_DELETE_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 动物识别接口\n     *\n     * @param {string} image - 图像数据，base64编码，要求base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     *   top_num 返回预测得分top结果数，默认为6\n     *   baike_num 返回百科信息的结果数，默认不返回\n     * @return {Promise} - 标准Promise对象\n     */\n    animalDetect(image, options) {\n        let param = {\n            image: image,\n            targetPath: ANIMAL_DETECT_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 植物识别接口\n     *\n     * @param {string} image - 图像数据，base64编码，要求base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     *   baike_num 返回百科信息的结果数，默认不返回\n     * @return {Promise} - 标准Promise对象\n     */\n    plantDetect(image, options) {\n        let param = {\n            image: image,\n            targetPath: PLANT_DETECT_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 图像主体检测接口\n     *\n     * @param {string} image - 图像数据，base64编码，要求base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     *   with_face 如果检测主体是人，主体区域是否带上人脸部分，0-不带人脸区域，其他-带人脸区域，裁剪类需求推荐带人脸，检索/识别类需求推荐不带人脸。默认取1，带人脸。\n     * @return {Promise} - 标准Promise对象\n     */\n    objectDetect(image, options) {\n        let param = {\n            image: image,\n            targetPath: OBJECT_DETECT_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 地标识别接口\n     *\n     * @param {string} image - 图像数据，base64编码，要求base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     * @return {Promise} - 标准Promise对象\n     */\n    landmark(image, options) {\n        let param = {\n            image: image,\n            targetPath: LANDMARK_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n}\n\nmodule.exports = AipImageClassify;\n\n","'use strict';\n/**\n * Copyright (c) 2017 Baidu.com, Inc. All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations under the License.\n *\n * @file AipImageCensor\n * @author baiduAip\n */\nconst BaseClient = require('./client/baseClient');\n\nconst RequestInfo = require('./client/requestInfo');\n\nconst objectTools = require('./util/objectTools');\n\nconst HttpClient = require('./http/httpClient');\n\nconst HttpClientJson = require('./http/httpClientExt');\n\nconst httpHeader = require('./const/httpHeader');\n\nconst CONTENT_TYPE_JSON = 'application/json';\n\nconst METHOD_POST = 'POST';\n\nconst PATH_USER_DEFINED = '/rest/2.0/solution/v1/img_censor/user_defined';\nconst PATH_ANTIPORN_GIF = '/rest/2.0/antiporn/v1/detect_gif';\nconst PATH_FACEAUDIT = '/rest/2.0/solution/v1/face_audit';\nconst PATH_COMBOCENSOR = '/api/v1/solution/direct/img_censor';\nconst PATH_REPORT = '/rpc/2.0/feedback/v1/report';\n\nconst PATH_ANTIPORN = '/rest/2.0/antiporn/v1/detect';\nconst PATH_ANTITERROR = '/rest/2.0/antiterror/v1/detect';\nconst PATH_ANTISPAM = '/rest/2.0/antispam/v2/spam';\n\nconst scope = require('./const/devScope').DEFAULT;\n\n\n/**\n * AipContentCensor类，构造调用图像审核对象\n *\n * @class\n * @extends BaseClient\n * @constructor\n * @param {string} appid appid.\n * @param {string} ak  access key.\n * @param {string} sk  security key.\n */\nclass AipImageCensor extends BaseClient {\n    constructor(appId, ak, sk) {\n        super(appId, ak, sk);\n    }\n\n    commonImpl(param) {\n        let httpClient = new HttpClient();\n        let apiUrl = param.targetPath;\n        delete param.targetPath;\n        let requestInfo = new RequestInfo(apiUrl,\n            param, METHOD_POST);\n        return this.doRequest(requestInfo, httpClient);\n    }\n\n    jsonRequestImpl(param) {\n        let httpClient = new HttpClientJson();\n        let apiUrl = param.targetPath;\n        delete param.targetPath;\n        let requestInfo = new RequestInfo(apiUrl,\n            param, METHOD_POST, false, {\n                [httpHeader.CONTENT_TYPE]: CONTENT_TYPE_JSON\n            });\n        return this.doRequest(requestInfo, httpClient);\n    }\n\n    antiPornGif(image, options) {\n        let param = {\n            image: image,\n            targetPath: PATH_ANTIPORN_GIF\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    antiPorn(image, options) {\n        let param = {\n            image: image,\n            targetPath: PATH_ANTIPORN\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    antiTerror(image, options) {\n        let param = {\n            image: image,\n            targetPath: PATH_ANTITERROR\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    antiSpam(content, options) {\n        let param = {\n            content: content,\n            targetPath: PATH_ANTISPAM\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    faceAudit(images, type, configId) {\n        let param = {configId: configId};\n        if (type === 'url') {\n            images = images.map(function (elm) {\n                return encodeURIComponent(elm);\n            });\n            param.imgUrls = images.join(',');\n        }\n        if (type === 'base64') {\n            param.images = images.join(',');\n        }\n        param.targetPath = PATH_FACEAUDIT;\n        return this.commonImpl(param);\n    }\n\n    imageCensorUserDefined(image, type) {\n        let param = {};\n        if (type === 'url') {\n            param.imgUrl = image;\n        }\n        if (type === 'base64') {\n            param.image = image;\n        }\n        param.targetPath = PATH_USER_DEFINED;\n        return this.commonImpl(param);\n    }\n\n    imageCensorComb(image, type, scenes, scenesConf) {\n        let param = {};\n        if (type === 'url') {\n            param.imgUrl = image;\n        }\n        if (type === 'base64') {\n            param.image = image;\n        }\n        param.scenes = scenes;\n        param.sceneConf = scenesConf;\n        param.targetPath = PATH_COMBOCENSOR;\n        return this.jsonRequestImpl(param);\n    }\n\n    report(feedback) {\n        let param = {};\n        param.feedback = feedback;\n        param.targetPath = PATH_REPORT;\n        return this.jsonRequestImpl(param);\n    }\n}\n\nmodule.exports = AipImageCensor;","'use strict';\n/**\n * Copyright (c) 2017 Baidu.com, Inc. All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations under the License.\n *\n * @file httpClientExt类\n * @author baiduAip\n */\n\nconst HttpClient = require('./httpClient');\nconst code = require('../const/code');\nconst HttpHeader = require('../const/httpHeader');\nconst CONTENT_TYPE_JSON = 'application/json';\n\n/**\n * HttpClientExt类\n * 图像审核某个接口调用需要json的Content-type,请求body为json字符串\n *\n * @class\n * @extends HttpClient\n * @constructor\n */\nclass HttpClientExt extends HttpClient {\n    constructor() {\n        super();\n    }\n    postWithInfo(requestInfo) {\n        let body = this.createBody(requestInfo.params);\n        let options = {\n            method: requestInfo.method,\n            url: requestInfo.getUrl(),\n            headers: requestInfo.headers,\n            encoding: null,\n            timeout: HttpClient.DEFAULT_TIMEOUT,\n            body: body\n        };\n        return this.req(options);\n    }\n    createBody(param) {\n        let body = JSON.stringify(param);\n        return body;\n    }\n}\n\n\nmodule.exports = HttpClientExt;","'use strict';\n/**\n * Copyright (c) 2017 Baidu.com, Inc. All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations under the License.\n *\n * @file 常用编码格式常量\n * @author baiduAip\n */\nconst code = {\n    GBK: 'GBK',\n    BIN: 'binary',\n    UTF8: 'utf-8',\n    BASE64: 'base64'\n};\n\nmodule.exports = Object.freeze(code);","'use strict';\n/**\n * Copyright (c) 2017 Baidu.com, Inc. All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations under the License.\n *\n * @file AipFace.js\n * @author baidu aip\n */\n\n\n\nconst BaseClient = require('./client/baseClient');\n\nconst RequestInfo = require('./client/requestInfo');\n\nconst HttpClient = require('./http/httpClientExt');\n\nconst objectTools = require('./util/objectTools');\n\nconst METHOD_POST = 'POST';\n\nconst DETECT_PATH = '/rest/2.0/face/v3/detect';\nconst SEARCH_PATH = '/rest/2.0/face/v3/search';\nconst USER_ADD_PATH = '/rest/2.0/face/v3/faceset/user/add';\nconst USER_UPDATE_PATH = '/rest/2.0/face/v3/faceset/user/update';\nconst FACE_DELETE_PATH = '/rest/2.0/face/v3/faceset/face/delete';\nconst USER_GET_PATH = '/rest/2.0/face/v3/faceset/user/get';\nconst FACE_GETLIST_PATH = '/rest/2.0/face/v3/faceset/face/getlist';\nconst GROUP_GETUSERS_PATH = '/rest/2.0/face/v3/faceset/group/getusers';\nconst USER_COPY_PATH = '/rest/2.0/face/v3/faceset/user/copy';\nconst USER_DELETE_PATH = '/rest/2.0/face/v3/faceset/user/delete';\nconst GROUP_ADD_PATH = '/rest/2.0/face/v3/faceset/group/add';\nconst GROUP_DELETE_PATH = '/rest/2.0/face/v3/faceset/group/delete';\nconst GROUP_GETLIST_PATH = '/rest/2.0/face/v3/faceset/group/getlist';\nconst PERSON_VERIFY_PATH = '/rest/2.0/face/v3/person/verify';\nconst VIDEO_SESSIONCODE_PATH = '/rest/2.0/face/v1/faceliveness/sessioncode';\n\n\n/**\n * AipFace类\n *\n * @class\n * @extends BaseClient\n * @constructor\n * @param {string} appid appid.\n * @param {string} ak  access key.\n * @param {string} sk  security key.\n */\nclass AipFace extends BaseClient {\n    constructor(appId, ak, sk) {\n        super(appId, ak, sk);\n    }\n    commonImpl(param) {\n        let httpClient = new HttpClient();\n        let apiUrl = param.targetPath;\n        delete param.targetPath;\n        let requestInfo = new RequestInfo(apiUrl,\n            param, METHOD_POST);\n        return this.doRequest(requestInfo, httpClient);\n    }\n\n    /**\n     * 人脸检测接口\n     *\n     * @param {string} image - 图片信息(**总数据大小应小于10M**)，图片上传方式根据image_type来判断\n     * @param {string} imageType - 图片类型 **BASE64**:图片的base64值，base64编码后的图片数据，需urlencode，编码后的图片大小不超过2M；**URL**:图片的 URL地址( 可能由于网络等原因导致下载图片时间过长)**；FACE_TOKEN**: 人脸图片的唯一标识，调用人脸检测接口时，会为每个人脸图片赋予一个唯一的FACE_TOKEN，同一张图片多次检测得到的FACE_TOKEN是同一个\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     *   face_field 包括**age,beauty,expression,faceshape,gender,glasses,landmark,race,quality,facetype信息**  <br> 逗号分隔. 默认只返回face_token、人脸框、概率和旋转角度\n     *   max_face_num 最多处理人脸的数目，默认值为1，仅检测图片中面积最大的那个人脸；**最大值10**，检测图片中面积最大的几张人脸。\n     *   face_type 人脸的类型 **LIVE**表示生活照：通常为手机、相机拍摄的人像图片、或从网络获取的人像图片等**IDCARD**表示身份证芯片照：二代身份证内置芯片中的人像照片 **WATERMARK**表示带水印证件照：一般为带水印的小图，如公安网小图 **CERT**表示证件照片：如拍摄的身份证、工卡、护照、学生证等证件图片 默认**LIVE**\n     * @return {Promise} - 标准Promise对象\n     */\n    detect(image, imageType, options) {\n        let param = {\n            image: image,\n            image_type: imageType,\n            targetPath: DETECT_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 人脸搜索接口\n     *\n     * @param {string} image - 图片信息(**总数据大小应小于10M**)，图片上传方式根据image_type来判断\n     * @param {string} imageType - 图片类型 **BASE64**:图片的base64值，base64编码后的图片数据，需urlencode，编码后的图片大小不超过2M；**URL**:图片的 URL地址( 可能由于网络等原因导致下载图片时间过长)**；FACE_TOKEN**: 人脸图片的唯一标识，调用人脸检测接口时，会为每个人脸图片赋予一个唯一的FACE_TOKEN，同一张图片多次检测得到的FACE_TOKEN是同一个\n     * @param {string} groupIdList - 从指定的group中进行查找 用逗号分隔，**上限20个**\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     *   quality_control 图片质量控制  **NONE**: 不进行控制 **LOW**:较低的质量要求 **NORMAL**: 一般的质量要求 **HIGH**: 较高的质量要求 **默认 NONE**\n     *   liveness_control 活体检测控制  **NONE**: 不进行控制 **LOW**:较低的活体要求(高通过率 低攻击拒绝率) **NORMAL**: 一般的活体要求(平衡的攻击拒绝率, 通过率) **HIGH**: 较高的活体要求(高攻击拒绝率 低通过率) **默认NONE**\n     *   user_id 当需要对特定用户进行比对时，指定user_id进行比对。即人脸认证功能。\n     *   max_user_num 查找后返回的用户数量。返回相似度最高的几个用户，默认为1，最多返回20个。\n     * @return {Promise} - 标准Promise对象\n     */\n    search(image, imageType, groupIdList, options) {\n        let param = {\n            image: image,\n            image_type: imageType,\n            group_id_list: groupIdList,\n            targetPath: SEARCH_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 人脸注册接口\n     *\n     * @param {string} image - 图片信息(**总数据大小应小于10M**)，图片上传方式根据image_type来判断\n     * @param {string} imageType - 图片类型 **BASE64**:图片的base64值，base64编码后的图片数据，需urlencode，编码后的图片大小不超过2M；**URL**:图片的 URL地址( 可能由于网络等原因导致下载图片时间过长)**；FACE_TOKEN**: 人脸图片的唯一标识，调用人脸检测接口时，会为每个人脸图片赋予一个唯一的FACE_TOKEN，同一张图片多次检测得到的FACE_TOKEN是同一个\n     * @param {string} groupId - 用户组id（由数字、字母、下划线组成），长度限制128B\n     * @param {string} userId - 用户id（由数字、字母、下划线组成），长度限制128B\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     *   user_info 用户资料，长度限制256B\n     *   quality_control 图片质量控制  **NONE**: 不进行控制 **LOW**:较低的质量要求 **NORMAL**: 一般的质量要求 **HIGH**: 较高的质量要求 **默认 NONE**\n     *   liveness_control 活体检测控制  **NONE**: 不进行控制 **LOW**:较低的活体要求(高通过率 低攻击拒绝率) **NORMAL**: 一般的活体要求(平衡的攻击拒绝率, 通过率) **HIGH**: 较高的活体要求(高攻击拒绝率 低通过率) **默认NONE**\n     * @return {Promise} - 标准Promise对象\n     */\n    addUser(image, imageType, groupId, userId, options) {\n        let param = {\n            image: image,\n            image_type: imageType,\n            group_id: groupId,\n            user_id: userId,\n            targetPath: USER_ADD_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 人脸更新接口\n     *\n     * @param {string} image - 图片信息(**总数据大小应小于10M**)，图片上传方式根据image_type来判断\n     * @param {string} imageType - 图片类型 **BASE64**:图片的base64值，base64编码后的图片数据，需urlencode，编码后的图片大小不超过2M；**URL**:图片的 URL地址( 可能由于网络等原因导致下载图片时间过长)**；FACE_TOKEN**: 人脸图片的唯一标识，调用人脸检测接口时，会为每个人脸图片赋予一个唯一的FACE_TOKEN，同一张图片多次检测得到的FACE_TOKEN是同一个\n     * @param {string} groupId - 更新指定groupid下uid对应的信息\n     * @param {string} userId - 用户id（由数字、字母、下划线组成），长度限制128B\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     *   user_info 用户资料，长度限制256B\n     *   quality_control 图片质量控制  **NONE**: 不进行控制 **LOW**:较低的质量要求 **NORMAL**: 一般的质量要求 **HIGH**: 较高的质量要求 **默认 NONE**\n     *   liveness_control 活体检测控制  **NONE**: 不进行控制 **LOW**:较低的活体要求(高通过率 低攻击拒绝率) **NORMAL**: 一般的活体要求(平衡的攻击拒绝率, 通过率) **HIGH**: 较高的活体要求(高攻击拒绝率 低通过率) **默认NONE**\n     * @return {Promise} - 标准Promise对象\n     */\n    updateUser(image, imageType, groupId, userId, options) {\n        let param = {\n            image: image,\n            image_type: imageType,\n            group_id: groupId,\n            user_id: userId,\n            targetPath: USER_UPDATE_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 人脸删除接口\n     *\n     * @param {string} userId - 用户id（由数字、字母、下划线组成），长度限制128B\n     * @param {string} groupId - 用户组id（由数字、字母、下划线组成），长度限制128B\n     * @param {string} faceToken - 需要删除的人脸图片token，（由数字、字母、下划线组成）长度限制64B\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     * @return {Promise} - 标准Promise对象\n     */\n    faceDelete(userId, groupId, faceToken, options) {\n        let param = {\n            user_id: userId,\n            group_id: groupId,\n            face_token: faceToken,\n            targetPath: FACE_DELETE_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 用户信息查询接口\n     *\n     * @param {string} userId - 用户id（由数字、字母、下划线组成），长度限制128B\n     * @param {string} groupId - 用户组id（由数字、字母、下划线组成），长度限制128B\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     * @return {Promise} - 标准Promise对象\n     */\n    getUser(userId, groupId, options) {\n        let param = {\n            user_id: userId,\n            group_id: groupId,\n            targetPath: USER_GET_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 获取用户人脸列表接口\n     *\n     * @param {string} userId - 用户id（由数字、字母、下划线组成），长度限制128B\n     * @param {string} groupId - 用户组id（由数字、字母、下划线组成），长度限制128B\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     * @return {Promise} - 标准Promise对象\n     */\n    faceGetlist(userId, groupId, options) {\n        let param = {\n            user_id: userId,\n            group_id: groupId,\n            targetPath: FACE_GETLIST_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 获取用户列表接口\n     *\n     * @param {string} groupId - 用户组id（由数字、字母、下划线组成），长度限制128B\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     *   start 默认值0，起始序号\n     *   length 返回数量，默认值100，最大值1000\n     * @return {Promise} - 标准Promise对象\n     */\n    getGroupUsers(groupId, options) {\n        let param = {\n            group_id: groupId,\n            targetPath: GROUP_GETUSERS_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 复制用户接口\n     *\n     * @param {string} userId - 用户id（由数字、字母、下划线组成），长度限制128B\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     *   src_group_id 从指定组里复制信息\n     *   dst_group_id 需要添加用户的组id\n     * @return {Promise} - 标准Promise对象\n     */\n    userCopy(userId, options) {\n        let param = {\n            user_id: userId,\n            targetPath: USER_COPY_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 删除用户接口\n     *\n     * @param {string} groupId - 用户组id（由数字、字母、下划线组成），长度限制128B\n     * @param {string} userId - 用户id（由数字、字母、下划线组成），长度限制128B\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     * @return {Promise} - 标准Promise对象\n     */\n    deleteUser(groupId, userId, options) {\n        let param = {\n            group_id: groupId,\n            user_id: userId,\n            targetPath: USER_DELETE_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 创建用户组接口\n     *\n     * @param {string} groupId - 用户组id（由数字、字母、下划线组成），长度限制128B\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     * @return {Promise} - 标准Promise对象\n     */\n    groupAdd(groupId, options) {\n        let param = {\n            group_id: groupId,\n            targetPath: GROUP_ADD_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 删除用户组接口\n     *\n     * @param {string} groupId - 用户组id（由数字、字母、下划线组成），长度限制128B\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     * @return {Promise} - 标准Promise对象\n     */\n    groupDelete(groupId, options) {\n        let param = {\n            group_id: groupId,\n            targetPath: GROUP_DELETE_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 组列表查询接口\n     *\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     *   start 默认值0，起始序号\n     *   length 返回数量，默认值100，最大值1000\n     * @return {Promise} - 标准Promise对象\n     */\n    getGrouplist(options) {\n        let param = {\n            targetPath: GROUP_GETLIST_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 身份验证接口\n     *\n     * @param {string} image - 图片信息(**总数据大小应小于10M**)，图片上传方式根据image_type来判断\n     * @param {string} imageType - 图片类型 **BASE64**:图片的base64值，base64编码后的图片数据，需urlencode，编码后的图片大小不超过2M；**URL**:图片的 URL地址( 可能由于网络等原因导致下载图片时间过长)**；FACE_TOKEN**: 人脸图片的唯一标识，调用人脸检测接口时，会为每个人脸图片赋予一个唯一的FACE_TOKEN，同一张图片多次检测得到的FACE_TOKEN是同一个\n     * @param {string} idCardNumber - 身份证号（真实身份证号号码）\n     * @param {string} name - utf8，姓名（真实姓名，和身份证号匹配）\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     *   quality_control 图片质量控制  **NONE**: 不进行控制 **LOW**:较低的质量要求 **NORMAL**: 一般的质量要求 **HIGH**: 较高的质量要求 **默认 NONE**\n     *   liveness_control 活体检测控制  **NONE**: 不进行控制 **LOW**:较低的活体要求(高通过率 低攻击拒绝率) **NORMAL**: 一般的活体要求(平衡的攻击拒绝率, 通过率) **HIGH**: 较高的活体要求(高攻击拒绝率 低通过率) **默认NONE**\n     * @return {Promise} - 标准Promise对象\n     */\n    personVerify(image, imageType, idCardNumber, name, options) {\n        let param = {\n            image: image,\n            image_type: imageType,\n            id_card_number: idCardNumber,\n            name: name,\n            targetPath: PERSON_VERIFY_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 语音校验码接口接口\n     *\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     *   appid 百度云创建应用时的唯一标识ID\n     * @return {Promise} - 标准Promise对象\n     */\n    videoSessioncode(options) {\n        let param = {\n            targetPath: VIDEO_SESSIONCODE_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n    /**\n     * 在线活体检测\n     *\n     * @param {Object} param - 参数对象数组\n     * @return {Promise} - 标准Promise对象\n     * > 说明：两张图片的对象举例：\n     * >\n     * > [\n     * >     {\n     * >         \"image\": \"sfasq35sadvsvqwr5q...\",\n     * >         \"image_type\": \"BASE64\",\n     * >         \"face_field\": \"quality\"\n     * >     },\n     * >     {\n     * >         \"image\": \"sfasq35sadvsvqwr5q...\",\n     * >         \"image_type\": \"BASE64\",\n     * >         \"face_field\": \"quality\"\n     * >     }\n     * > ]\n     */\n    faceverify(object) {\n        const FACEVERIFY_PATH = '/rest/2.0/face/v3/faceverify';\n        const HttpClientExt = require('./http/httpClientExt');\n        let httpClientJson = new HttpClientExt();\n        let requestInfo = new RequestInfo(FACEVERIFY_PATH,\n            object, METHOD_POST);\n        return this.doRequest(requestInfo, httpClientJson);\n    }\n\n    /**\n     * 人脸比对接口\n     *\n     * @param {Object} param - 参数对象数组\n     * @return {Promise} - 标准Promise对象\n     * > 说明：两张图片的对象举例：\n     * >\n     * > [\n     * >     {\n     * >         \"image\": \"sfasq35sadvsvqwr5q...\",\n     * >         \"image_type\": \"BASE64\",\n     * >         \"face_type\": \"LIVE\",\n     * >         \"quality_control\": \"LOW\",\n     * >         \"liveness_control\": \"HIGH\"\n     * >     },\n     * >     {\n     * >         \"image\": \"sfasq35sadvsvqwr5q...\",\n     * >         \"image_type\": \"BASE64\",\n     * >         \"face_type\": \"IDCARD\",\n     * >         \"quality_control\": \"LOW\",\n     * >         \"liveness_control\": \"HIGH\"\n     * >     }\n     * > ]\n     */\n    match(object) {\n        const MATCH_PATH = '/rest/2.0/face/v3/match';\n        const HttpClientExt = require('./http/httpClientExt');\n        let httpClientJson = new HttpClientExt();\n        let requestInfo = new RequestInfo(MATCH_PATH,\n            object, METHOD_POST);\n        return this.doRequest(requestInfo, httpClientJson);\n    }\n}\n\nmodule.exports = AipFace;\n\n","'use strict';\n/**\n * Copyright (c) 2017 Baidu.com, Inc. All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations under the License.\n *\n * @file AipOcr.js\n * @author baidu aip\n */\n\nconst BaseClient = require('./client/baseClient');\n\nconst RequestInfo = require('./client/requestInfo');\n\nconst HttpClient = require('./http/httpClient');\n\nconst objectTools = require('./util/objectTools');\n\nconst METHOD_POST = 'POST';\n\nconst GENERAL_BASIC_PATH = '/rest/2.0/ocr/v1/general_basic';\nconst ACCURATE_BASIC_PATH = '/rest/2.0/ocr/v1/accurate_basic';\nconst GENERAL_PATH = '/rest/2.0/ocr/v1/general';\nconst ACCURATE_PATH = '/rest/2.0/ocr/v1/accurate';\nconst GENERAL_ENHANCED_PATH = '/rest/2.0/ocr/v1/general_enhanced';\nconst WEB_IMAGE_PATH = '/rest/2.0/ocr/v1/webimage';\nconst IDCARD_PATH = '/rest/2.0/ocr/v1/idcard';\nconst BANKCARD_PATH = '/rest/2.0/ocr/v1/bankcard';\nconst DRIVING_LICENSE_PATH = '/rest/2.0/ocr/v1/driving_license';\nconst VEHICLE_LICENSE_PATH = '/rest/2.0/ocr/v1/vehicle_license';\nconst LICENSE_PLATE_PATH = '/rest/2.0/ocr/v1/license_plate';\nconst BUSINESS_LICENSE_PATH = '/rest/2.0/ocr/v1/business_license';\nconst RECEIPT_PATH = '/rest/2.0/ocr/v1/receipt';\nconst TRAIN_TICKET_PATH = '/rest/2.0/ocr/v1/train_ticket';\nconst TAXI_RECEIPT_PATH = '/rest/2.0/ocr/v1/taxi_receipt';\nconst FORM_PATH = '/rest/2.0/ocr/v1/form';\nconst TABLE_RECOGNIZE_PATH = '/rest/2.0/solution/v1/form_ocr/request';\nconst TABLE_RESULT_GET_PATH = '/rest/2.0/solution/v1/form_ocr/get_request_result';\nconst VAT_INVOICE_PATH = '/rest/2.0/ocr/v1/vat_invoice';\nconst QRCODE_PATH = '/rest/2.0/ocr/v1/qrcode';\nconst NUMBERS_PATH = '/rest/2.0/ocr/v1/numbers';\nconst LOTTERY_PATH = '/rest/2.0/ocr/v1/lottery';\nconst PASSPORT_PATH = '/rest/2.0/ocr/v1/passport';\nconst BUSINESS_CARD_PATH = '/rest/2.0/ocr/v1/business_card';\nconst HANDWRITING_PATH = '/rest/2.0/ocr/v1/handwriting';\nconst CUSTOM_PATH = '/rest/2.0/solution/v1/iocr/recognise';\n\n\n/**\n * AipOcr类\n *\n * @class\n * @extends BaseClient\n * @constructor\n * @param {string} appid appid.\n * @param {string} ak  access key.\n * @param {string} sk  security key.\n */\nclass AipOcr extends BaseClient {\n    constructor(appId, ak, sk) {\n        super(appId, ak, sk);\n    }\n    commonImpl(param) {\n        let httpClient = new HttpClient();\n        let apiUrl = param.targetPath;\n        delete param.targetPath;\n        let requestInfo = new RequestInfo(apiUrl,\n            param, METHOD_POST);\n        return this.doRequest(requestInfo, httpClient);\n    }\n\n    /**\n     * 通用文字识别接口\n     *\n     * @param {string} image - 图像数据，base64编码，要求base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     *   language_type 识别语言类型，默认为CHN_ENG。可选值包括：<br>- CHN_ENG：中英文混合；<br>- ENG：英文；<br>- POR：葡萄牙语；<br>- FRE：法语；<br>- GER：德语；<br>- ITA：意大利语；<br>- SPA：西班牙语；<br>- RUS：俄语；<br>- JAP：日语；<br>- KOR：韩语；\n     *   detect_direction 是否检测图像朝向，默认不检测，即：false。朝向是指输入图像是正常方向、逆时针旋转90/180/270度。可选值包括:<br>- true：检测朝向；<br>- false：不检测朝向。\n     *   detect_language 是否检测语言，默认不检测。当前支持（中文、英语、日语、韩语）\n     *   probability 是否返回识别结果中每一行的置信度\n     * @return {Promise} - 标准Promise对象\n     */\n    generalBasic(image, options) {\n        let param = {\n            image: image,\n            targetPath: GENERAL_BASIC_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 通用文字识别接口\n     *\n     * @param {string} url - 图片完整URL，URL长度不超过1024字节，URL对应的图片base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式，当image字段存在时url字段失效\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     *   language_type 识别语言类型，默认为CHN_ENG。可选值包括：<br>- CHN_ENG：中英文混合；<br>- ENG：英文；<br>- POR：葡萄牙语；<br>- FRE：法语；<br>- GER：德语；<br>- ITA：意大利语；<br>- SPA：西班牙语；<br>- RUS：俄语；<br>- JAP：日语；<br>- KOR：韩语；\n     *   detect_direction 是否检测图像朝向，默认不检测，即：false。朝向是指输入图像是正常方向、逆时针旋转90/180/270度。可选值包括:<br>- true：检测朝向；<br>- false：不检测朝向。\n     *   detect_language 是否检测语言，默认不检测。当前支持（中文、英语、日语、韩语）\n     *   probability 是否返回识别结果中每一行的置信度\n     * @return {Promise} - 标准Promise对象\n     */\n    generalBasicUrl(url, options) {\n        let param = {\n            url: url,\n            targetPath: GENERAL_BASIC_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 通用文字识别（高精度版）接口\n     *\n     * @param {string} image - 图像数据，base64编码，要求base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     *   detect_direction 是否检测图像朝向，默认不检测，即：false。朝向是指输入图像是正常方向、逆时针旋转90/180/270度。可选值包括:<br>- true：检测朝向；<br>- false：不检测朝向。\n     *   probability 是否返回识别结果中每一行的置信度\n     * @return {Promise} - 标准Promise对象\n     */\n    accurateBasic(image, options) {\n        let param = {\n            image: image,\n            targetPath: ACCURATE_BASIC_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 通用文字识别（含位置信息版）接口\n     *\n     * @param {string} image - 图像数据，base64编码，要求base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     *   recognize_granularity 是否定位单字符位置，big：不定位单字符位置，默认值；small：定位单字符位置\n     *   language_type 识别语言类型，默认为CHN_ENG。可选值包括：<br>- CHN_ENG：中英文混合；<br>- ENG：英文；<br>- POR：葡萄牙语；<br>- FRE：法语；<br>- GER：德语；<br>- ITA：意大利语；<br>- SPA：西班牙语；<br>- RUS：俄语；<br>- JAP：日语；<br>- KOR：韩语；\n     *   detect_direction 是否检测图像朝向，默认不检测，即：false。朝向是指输入图像是正常方向、逆时针旋转90/180/270度。可选值包括:<br>- true：检测朝向；<br>- false：不检测朝向。\n     *   detect_language 是否检测语言，默认不检测。当前支持（中文、英语、日语、韩语）\n     *   vertexes_location 是否返回文字外接多边形顶点位置，不支持单字位置。默认为false\n     *   probability 是否返回识别结果中每一行的置信度\n     * @return {Promise} - 标准Promise对象\n     */\n    general(image, options) {\n        let param = {\n            image: image,\n            targetPath: GENERAL_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 通用文字识别（含位置信息版）接口\n     *\n     * @param {string} url - 图片完整URL，URL长度不超过1024字节，URL对应的图片base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式，当image字段存在时url字段失效\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     *   recognize_granularity 是否定位单字符位置，big：不定位单字符位置，默认值；small：定位单字符位置\n     *   language_type 识别语言类型，默认为CHN_ENG。可选值包括：<br>- CHN_ENG：中英文混合；<br>- ENG：英文；<br>- POR：葡萄牙语；<br>- FRE：法语；<br>- GER：德语；<br>- ITA：意大利语；<br>- SPA：西班牙语；<br>- RUS：俄语；<br>- JAP：日语；<br>- KOR：韩语；\n     *   detect_direction 是否检测图像朝向，默认不检测，即：false。朝向是指输入图像是正常方向、逆时针旋转90/180/270度。可选值包括:<br>- true：检测朝向；<br>- false：不检测朝向。\n     *   detect_language 是否检测语言，默认不检测。当前支持（中文、英语、日语、韩语）\n     *   vertexes_location 是否返回文字外接多边形顶点位置，不支持单字位置。默认为false\n     *   probability 是否返回识别结果中每一行的置信度\n     * @return {Promise} - 标准Promise对象\n     */\n    generalUrl(url, options) {\n        let param = {\n            url: url,\n            targetPath: GENERAL_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 通用文字识别（含位置高精度版）接口\n     *\n     * @param {string} image - 图像数据，base64编码，要求base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     *   recognize_granularity 是否定位单字符位置，big：不定位单字符位置，默认值；small：定位单字符位置\n     *   detect_direction 是否检测图像朝向，默认不检测，即：false。朝向是指输入图像是正常方向、逆时针旋转90/180/270度。可选值包括:<br>- true：检测朝向；<br>- false：不检测朝向。\n     *   vertexes_location 是否返回文字外接多边形顶点位置，不支持单字位置。默认为false\n     *   probability 是否返回识别结果中每一行的置信度\n     * @return {Promise} - 标准Promise对象\n     */\n    accurate(image, options) {\n        let param = {\n            image: image,\n            targetPath: ACCURATE_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 通用文字识别（含生僻字版）接口\n     *\n     * @param {string} image - 图像数据，base64编码，要求base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     *   language_type 识别语言类型，默认为CHN_ENG。可选值包括：<br>- CHN_ENG：中英文混合；<br>- ENG：英文；<br>- POR：葡萄牙语；<br>- FRE：法语；<br>- GER：德语；<br>- ITA：意大利语；<br>- SPA：西班牙语；<br>- RUS：俄语；<br>- JAP：日语；<br>- KOR：韩语；\n     *   detect_direction 是否检测图像朝向，默认不检测，即：false。朝向是指输入图像是正常方向、逆时针旋转90/180/270度。可选值包括:<br>- true：检测朝向；<br>- false：不检测朝向。\n     *   detect_language 是否检测语言，默认不检测。当前支持（中文、英语、日语、韩语）\n     *   probability 是否返回识别结果中每一行的置信度\n     * @return {Promise} - 标准Promise对象\n     */\n    generalEnhance(image, options) {\n        let param = {\n            image: image,\n            targetPath: GENERAL_ENHANCED_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 通用文字识别（含生僻字版）接口\n     *\n     * @param {string} url - 图片完整URL，URL长度不超过1024字节，URL对应的图片base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式，当image字段存在时url字段失效\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     *   language_type 识别语言类型，默认为CHN_ENG。可选值包括：<br>- CHN_ENG：中英文混合；<br>- ENG：英文；<br>- POR：葡萄牙语；<br>- FRE：法语；<br>- GER：德语；<br>- ITA：意大利语；<br>- SPA：西班牙语；<br>- RUS：俄语；<br>- JAP：日语；<br>- KOR：韩语；\n     *   detect_direction 是否检测图像朝向，默认不检测，即：false。朝向是指输入图像是正常方向、逆时针旋转90/180/270度。可选值包括:<br>- true：检测朝向；<br>- false：不检测朝向。\n     *   detect_language 是否检测语言，默认不检测。当前支持（中文、英语、日语、韩语）\n     *   probability 是否返回识别结果中每一行的置信度\n     * @return {Promise} - 标准Promise对象\n     */\n    generalEnhanceUrl(url, options) {\n        let param = {\n            url: url,\n            targetPath: GENERAL_ENHANCED_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 网络图片文字识别接口\n     *\n     * @param {string} image - 图像数据，base64编码，要求base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     *   detect_direction 是否检测图像朝向，默认不检测，即：false。朝向是指输入图像是正常方向、逆时针旋转90/180/270度。可选值包括:<br>- true：检测朝向；<br>- false：不检测朝向。\n     *   detect_language 是否检测语言，默认不检测。当前支持（中文、英语、日语、韩语）\n     * @return {Promise} - 标准Promise对象\n     */\n    webImage(image, options) {\n        let param = {\n            image: image,\n            targetPath: WEB_IMAGE_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 网络图片文字识别接口\n     *\n     * @param {string} url - 图片完整URL，URL长度不超过1024字节，URL对应的图片base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式，当image字段存在时url字段失效\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     *   detect_direction 是否检测图像朝向，默认不检测，即：false。朝向是指输入图像是正常方向、逆时针旋转90/180/270度。可选值包括:<br>- true：检测朝向；<br>- false：不检测朝向。\n     *   detect_language 是否检测语言，默认不检测。当前支持（中文、英语、日语、韩语）\n     * @return {Promise} - 标准Promise对象\n     */\n    webImageUrl(url, options) {\n        let param = {\n            url: url,\n            targetPath: WEB_IMAGE_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 身份证识别接口\n     *\n     * @param {string} image - 图像数据，base64编码，要求base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式\n     * @param {string} idCardSide - front：身份证含照片的一面；back：身份证带国徽的一面\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     *   detect_direction 是否检测图像朝向，默认不检测，即：false。朝向是指输入图像是正常方向、逆时针旋转90/180/270度。可选值包括:<br>- true：检测朝向；<br>- false：不检测朝向。\n     *   detect_risk 是否开启身份证风险类型(身份证复印件、临时身份证、身份证翻拍、修改过的身份证)功能，默认不开启，即：false。可选值:true-开启；false-不开启\n     * @return {Promise} - 标准Promise对象\n     */\n    idcard(image, idCardSide, options) {\n        let param = {\n            image: image,\n            id_card_side: idCardSide,\n            targetPath: IDCARD_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 银行卡识别接口\n     *\n     * @param {string} image - 图像数据，base64编码，要求base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     * @return {Promise} - 标准Promise对象\n     */\n    bankcard(image, options) {\n        let param = {\n            image: image,\n            targetPath: BANKCARD_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 驾驶证识别接口\n     *\n     * @param {string} image - 图像数据，base64编码，要求base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     *   detect_direction 是否检测图像朝向，默认不检测，即：false。朝向是指输入图像是正常方向、逆时针旋转90/180/270度。可选值包括:<br>- true：检测朝向；<br>- false：不检测朝向。\n     * @return {Promise} - 标准Promise对象\n     */\n    drivingLicense(image, options) {\n        let param = {\n            image: image,\n            targetPath: DRIVING_LICENSE_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 行驶证识别接口\n     *\n     * @param {string} image - 图像数据，base64编码，要求base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     *   detect_direction 是否检测图像朝向，默认不检测，即：false。朝向是指输入图像是正常方向、逆时针旋转90/180/270度。可选值包括:<br>- true：检测朝向；<br>- false：不检测朝向。\n     *   accuracy normal 使用快速服务，1200ms左右时延；缺省或其它值使用高精度服务，1600ms左右时延\n     * @return {Promise} - 标准Promise对象\n     */\n    vehicleLicense(image, options) {\n        let param = {\n            image: image,\n            targetPath: VEHICLE_LICENSE_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 车牌识别接口\n     *\n     * @param {string} image - 图像数据，base64编码，要求base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     *   multi_detect 是否检测多张车牌，默认为false，当置为true的时候可以对一张图片内的多张车牌进行识别\n     * @return {Promise} - 标准Promise对象\n     */\n    licensePlate(image, options) {\n        let param = {\n            image: image,\n            targetPath: LICENSE_PLATE_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 营业执照识别接口\n     *\n     * @param {string} image - 图像数据，base64编码，要求base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     * @return {Promise} - 标准Promise对象\n     */\n    businessLicense(image, options) {\n        let param = {\n            image: image,\n            targetPath: BUSINESS_LICENSE_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 通用票据识别接口\n     *\n     * @param {string} image - 图像数据，base64编码，要求base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     *   recognize_granularity 是否定位单字符位置，big：不定位单字符位置，默认值；small：定位单字符位置\n     *   probability 是否返回识别结果中每一行的置信度\n     *   accuracy normal 使用快速服务，1200ms左右时延；缺省或其它值使用高精度服务，1600ms左右时延\n     *   detect_direction 是否检测图像朝向，默认不检测，即：false。朝向是指输入图像是正常方向、逆时针旋转90/180/270度。可选值包括:<br>- true：检测朝向；<br>- false：不检测朝向。\n     * @return {Promise} - 标准Promise对象\n     */\n    receipt(image, options) {\n        let param = {\n            image: image,\n            targetPath: RECEIPT_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 火车票识别接口\n     *\n     * @param {string} image - 图像数据，base64编码，要求base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     * @return {Promise} - 标准Promise对象\n     */\n    trainTicket(image, options) {\n        let param = {\n            image: image,\n            targetPath: TRAIN_TICKET_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 出租车票识别接口\n     *\n     * @param {string} image - 图像数据，base64编码，要求base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     * @return {Promise} - 标准Promise对象\n     */\n    taxiReceipt(image, options) {\n        let param = {\n            image: image,\n            targetPath: TAXI_RECEIPT_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 表格文字识别同步接口接口\n     *\n     * @param {string} image - 图像数据，base64编码，要求base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     * @return {Promise} - 标准Promise对象\n     */\n    form(image, options) {\n        let param = {\n            image: image,\n            targetPath: FORM_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 表格文字识别接口\n     *\n     * @param {string} image - 图像数据，base64编码，要求base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     * @return {Promise} - 标准Promise对象\n     */\n    tableBegin(image, options) {\n        let param = {\n            image: image,\n            targetPath: TABLE_RECOGNIZE_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 表格识别结果接口\n     *\n     * @param {string} requestId - 发送表格文字识别请求时返回的request id\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     *   result_type 期望获取结果的类型，取值为“excel”时返回xls文件的地址，取值为“json”时返回json格式的字符串,默认为”excel”\n     * @return {Promise} - 标准Promise对象\n     */\n    tableGetresult(requestId, options) {\n        let param = {\n            request_id: requestId,\n            targetPath: TABLE_RESULT_GET_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 增值税发票识别接口\n     *\n     * @param {string} image - 图像数据，base64编码，要求base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     * @return {Promise} - 标准Promise对象\n     */\n    vatInvoice(image, options) {\n        let param = {\n            image: image,\n            targetPath: VAT_INVOICE_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 二维码识别接口\n     *\n     * @param {string} image - 图像数据，base64编码，要求base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     * @return {Promise} - 标准Promise对象\n     */\n    qrcode(image, options) {\n        let param = {\n            image: image,\n            targetPath: QRCODE_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 数字识别接口\n     *\n     * @param {string} image - 图像数据，base64编码，要求base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     *   recognize_granularity 是否定位单字符位置，big：不定位单字符位置，默认值；small：定位单字符位置\n     *   detect_direction 是否检测图像朝向，默认不检测，即：false。朝向是指输入图像是正常方向、逆时针旋转90/180/270度。可选值包括:<br>- true：检测朝向；<br>- false：不检测朝向。\n     * @return {Promise} - 标准Promise对象\n     */\n    numbers(image, options) {\n        let param = {\n            image: image,\n            targetPath: NUMBERS_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 彩票识别接口\n     *\n     * @param {string} image - 图像数据，base64编码，要求base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     *   recognize_granularity 是否定位单字符位置，big：不定位单字符位置，默认值；small：定位单字符位置\n     * @return {Promise} - 标准Promise对象\n     */\n    lottery(image, options) {\n        let param = {\n            image: image,\n            targetPath: LOTTERY_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 护照识别接口\n     *\n     * @param {string} image - 图像数据，base64编码，要求base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     * @return {Promise} - 标准Promise对象\n     */\n    passport(image, options) {\n        let param = {\n            image: image,\n            targetPath: PASSPORT_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 名片识别接口\n     *\n     * @param {string} image - 图像数据，base64编码，要求base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     * @return {Promise} - 标准Promise对象\n     */\n    businessCard(image, options) {\n        let param = {\n            image: image,\n            targetPath: BUSINESS_CARD_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 手写文字识别接口\n     *\n     * @param {string} image - 图像数据，base64编码，要求base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     *   recognize_granularity 是否定位单字符位置，big：不定位单字符位置，默认值；small：定位单字符位置\n     * @return {Promise} - 标准Promise对象\n     */\n    handwriting(image, options) {\n        let param = {\n            image: image,\n            targetPath: HANDWRITING_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 自定义模板文字识别接口\n     *\n     * @param {string} image - 图像数据，base64编码，要求base64编码后大小不超过4M，最短边至少15px，最长边最大4096px,支持jpg/png/bmp格式\n     * @param {string} templateSign - 您在自定义文字识别平台制作的模板的ID\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     * @return {Promise} - 标准Promise对象\n     */\n    custom(image, templateSign, options) {\n        let param = {\n            image: image,\n            templateSign: templateSign,\n            targetPath: CUSTOM_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n    tableRecorgnize(image, type, timeout, interval) {\n        let self = this;\n        timeout = timeout || 20000;\n        interval = interval || 2000;\n        return this.tableBegin(image).then(function(result) {\n            if (result.error_code) {\n                return result;\n            }\n            let id = result.result[0]['request_id'];\n            let pid = null;\n            let startTime = Date.now();\n            return new Promise(function(resolve, reject) {\n                pid = setInterval(function () {\n                    if (Date.now() - startTime > timeout) {\n                        reject({errorMsg: 'get result timeout', requestId: id});\n                        clearInterval(pid);\n                    } else {\n                        self.tableGetresult(id, type).then(function (result) {\n                            if (result['result']['ret_code'] === 3) {\n                                clearInterval(pid);\n                                resolve(result);\n                            }\n                        });\n                    }\n                }, interval);\n            })\n        });\n    }\n}\n\nmodule.exports = AipOcr;\n\n\n","'use strict';\n/**\n * Copyright (c) 2017 Baidu.com, Inc. All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations under the License.\n *\n * @file AipNlp.js\n * @author baidu aip\n */\n\nconst BaseClient = require('./client/baseClient');\n\nconst RequestInfo = require('./client/requestInfo');\n\nconst HttpClient = require('./http/httpClientNlp');\n\nconst objectTools = require('./util/objectTools');\n\nconst METHOD_POST = 'POST';\n\nconst LEXER_PATH = '/rpc/2.0/nlp/v1/lexer';\nconst LEXER_CUSTOM_PATH = '/rpc/2.0/nlp/v1/lexer_custom';\nconst DEP_PARSER_PATH = '/rpc/2.0/nlp/v1/depparser';\nconst WORD_EMBEDDING_PATH = '/rpc/2.0/nlp/v2/word_emb_vec';\nconst DNNLM_CN_PATH = '/rpc/2.0/nlp/v2/dnnlm_cn';\nconst WORD_SIM_EMBEDDING_PATH = '/rpc/2.0/nlp/v2/word_emb_sim';\nconst SIMNET_PATH = '/rpc/2.0/nlp/v2/simnet';\nconst COMMENT_TAG_PATH = '/rpc/2.0/nlp/v2/comment_tag';\nconst SENTIMENT_CLASSIFY_PATH = '/rpc/2.0/nlp/v1/sentiment_classify';\nconst KEYWORD_PATH = '/rpc/2.0/nlp/v1/keyword';\nconst TOPIC_PATH = '/rpc/2.0/nlp/v1/topic';\nconst ECNET_PATH = '/rpc/2.0/nlp/v1/ecnet';\nconst EMOTION_PATH = '/rpc/2.0/nlp/v1/emotion';\nconst NEWS_SUMMARY_PATH = '/rpc/2.0/nlp/v1/news_summary';\n\n\n/**\n * AipNlp类\n *\n * @class\n * @extends BaseClient\n * @constructor\n * @param {string} appid appid.\n * @param {string} ak  access key.\n * @param {string} sk  security key.\n */\nclass AipNlp extends BaseClient {\n    constructor(appId, ak, sk) {\n        super(appId, ak, sk);\n    }\n    commonImpl(param) {\n        let httpClient = new HttpClient();\n        let apiUrl = param.targetPath;\n        delete param.targetPath;\n        let requestInfo = new RequestInfo(apiUrl,\n            param, METHOD_POST);\n        return this.doRequest(requestInfo, httpClient);\n    }\n\n    /**\n     * 词法分析接口\n     *\n     * @param {string} text - 待分析文本（目前仅支持GBK编码），长度不超过65536字节\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     * @return {Promise} - 标准Promise对象\n     */\n    lexer(text, options) {\n        let param = {\n            text: text,\n            targetPath: LEXER_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 词法分析（定制版）接口\n     *\n     * @param {string} text - 待分析文本（目前仅支持GBK编码），长度不超过65536字节\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     * @return {Promise} - 标准Promise对象\n     */\n    lexerCustom(text, options) {\n        let param = {\n            text: text,\n            targetPath: LEXER_CUSTOM_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 依存句法分析接口\n     *\n     * @param {string} text - 待分析文本（目前仅支持GBK编码），长度不超过256字节\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     *   mode 模型选择。默认值为0，可选值mode=0（对应web模型）；mode=1（对应query模型）\n     * @return {Promise} - 标准Promise对象\n     */\n    depparser(text, options) {\n        let param = {\n            text: text,\n            targetPath: DEP_PARSER_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 词向量表示接口\n     *\n     * @param {string} word - 文本内容（GBK编码），最大64字节\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     * @return {Promise} - 标准Promise对象\n     */\n    wordembedding(word, options) {\n        let param = {\n            word: word,\n            targetPath: WORD_EMBEDDING_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * DNN语言模型接口\n     *\n     * @param {string} text - 文本内容（GBK编码），最大512字节，不需要切词\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     * @return {Promise} - 标准Promise对象\n     */\n    dnnlmCn(text, options) {\n        let param = {\n            text: text,\n            targetPath: DNNLM_CN_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 词义相似度接口\n     *\n     * @param {string} word1 - 词1（GBK编码），最大64字节\n     * @param {string} word2 - 词1（GBK编码），最大64字节\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     *   mode 预留字段，可选择不同的词义相似度模型。默认值为0，目前仅支持mode=0\n     * @return {Promise} - 标准Promise对象\n     */\n    wordSimEmbedding(word1, word2, options) {\n        let param = {\n            word_1: word1,\n            word_2: word2,\n            targetPath: WORD_SIM_EMBEDDING_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 短文本相似度接口\n     *\n     * @param {string} text1 - 待比较文本1（GBK编码），最大512字节\n     * @param {string} text2 - 待比较文本2（GBK编码），最大512字节\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     *   model 默认为\"BOW\"，可选\"BOW\"、\"CNN\"与\"GRNN\"\n     * @return {Promise} - 标准Promise对象\n     */\n    simnet(text1, text2, options) {\n        let param = {\n            text_1: text1,\n            text_2: text2,\n            targetPath: SIMNET_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 评论观点抽取接口\n     *\n     * @param {string} text - 评论内容（GBK编码），最大10240字节\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     *   type 评论行业类型，默认为4（餐饮美食）\n     * @return {Promise} - 标准Promise对象\n     */\n    commentTag(text, options) {\n        let param = {\n            text: text,\n            targetPath: COMMENT_TAG_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 情感倾向分析接口\n     *\n     * @param {string} text - 文本内容（GBK编码），最大102400字节\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     * @return {Promise} - 标准Promise对象\n     */\n    sentimentClassify(text, options) {\n        let param = {\n            text: text,\n            targetPath: SENTIMENT_CLASSIFY_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 文章标签接口\n     *\n     * @param {string} title - 篇章的标题，最大80字节\n     * @param {string} content - 篇章的正文，最大65535字节\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     * @return {Promise} - 标准Promise对象\n     */\n    keyword(title, content, options) {\n        let param = {\n            title: title,\n            content: content,\n            targetPath: KEYWORD_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 文章分类接口\n     *\n     * @param {string} title - 篇章的标题，最大80字节\n     * @param {string} content - 篇章的正文，最大65535字节\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     * @return {Promise} - 标准Promise对象\n     */\n    topic(title, content, options) {\n        let param = {\n            title: title,\n            content: content,\n            targetPath: TOPIC_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 文本纠错接口\n     *\n     * @param {string} text - 待纠错文本，输入限制511字节\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     * @return {Promise} - 标准Promise对象\n     */\n    ecnet(text, options) {\n        let param = {\n            text: text,\n            targetPath: ECNET_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 对话情绪识别接口接口\n     *\n     * @param {string} text - 待识别情感文本，输入限制512字节\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     *   scene default（默认项-不区分场景），talk（闲聊对话-如度秘聊天等），task（任务型对话-如导航对话等），customer_service（客服对话-如电信/银行客服等）\n     * @return {Promise} - 标准Promise对象\n     */\n    emotion(text, options) {\n        let param = {\n            text: text,\n            targetPath: EMOTION_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 新闻摘要接口接口\n     *\n     * @param {string} content - 字符串（限200字符数）字符串仅支持GBK编码，长度需小于200字符数（即400字节），请输入前确认字符数没有超限，若字符数超长会返回错误。标题在算法中具有重要的作用，若文章确无标题，输入参数的“标题”字段为空即可\n     * @param {integer} maxSummaryLen - 此数值将作为摘要结果的最大长度。例如：原文长度1000字，本参数设置为150，则摘要结果的最大长度是150字；推荐最优区间：200-500字\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     *   title 字符串（限200字符数）字符串仅支持GBK编码，长度需小于200字符数（即400字节），请输入前确认字符数没有超限，若字符数超长会返回错误。标题在算法中具有重要的作用，若文章确无标题，输入参数的“标题”字段为空即可\n     * @return {Promise} - 标准Promise对象\n     */\n    newsSummary(content, maxSummaryLen, options) {\n        let param = {\n            content: content,\n            max_summary_len: maxSummaryLen,\n            targetPath: NEWS_SUMMARY_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n}\n\nmodule.exports = AipNlp;\n\n","'use strict';\n/**\n * Copyright (c) 2017 Baidu.com, Inc. All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations under the License.\n *\n * @file httpClientNlp类\n * @author baiduAip\n */\nconst iconv = require('iconv-lite');\nconst HttpClient = require('./httpClient');\nconst objectTools = require('../util/objectTools');\nconst request = require('request');\nconst code = require('../const/code');\n\n/**\n * HttpClientNlp类\n * nlp接口调用使用GBK编码解码实现,依赖iconv-lite库\n * @see https://github.com/ashtuchkin/iconv-lite\n *\n * @class\n * @extends HttpClient\n * @constructor\n */\nclass HttpClientNlp extends HttpClient {\n    constructor() {\n        super();\n    }\n    req(options) {\n        // 首先处理设置INTERCEPTOR的情况\n        if (objectTools.isFunction(HttpClient.REQUEST_INTERCEPTOR)) {\n            options = HttpClient.REQUEST_INTERCEPTOR(options);\n        // 其次设置全局request options的\n        } else if (objectTools.isObject(HttpClient.REQUEST_GLOBAL_OPTIONS)) {\n            options = objectTools.merge(HttpClient.REQUEST_GLOBAL_OPTIONS, options);\n        }\n\n        return new Promise(function(resolve, reject) {\n            request(options, function(error, response, body) {\n                if (error === null) {\n                    let buffer = new Buffer(body);\n                    let decodedBody = iconv.decode(buffer, code.GBK);\n                    try {\n                        resolve(JSON.parse(decodedBody));\n                    } catch (e) {\n                        // 无法解析json请求，就返回原始body\n                        resolve(decodedBody);\n                    }\n                } else {\n                    reject(error);\n                }\n            });\n        });\n    }\n    postWithInfo(requestInfo) {\n        let body = this.createBody(requestInfo.params);\n        let options = {\n            method: requestInfo.method,\n            url: requestInfo.getUrl(),\n            headers: requestInfo.headers,\n            encoding: null,\n            timeout: HttpClient.DEFAULT_TIMEOUT,\n            body: body\n        };\n        return this.req(options);\n    }\n    createBody(param) {\n        let body = null;\n        body = iconv.encode(JSON.stringify(param), code.GBK);\n        return body;\n    }\n}\n\nmodule.exports = HttpClientNlp;","'use strict';\n/**\n * Copyright (c) 2017 Baidu.com, Inc. All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations under the License.\n *\n * @file AipKg.js\n * @author baidu aip\n */\n\n\n\nconst BaseClient = require('./client/baseClient');\n\nconst RequestInfo = require('./client/requestInfo');\n\nconst HttpClient = require('./http/httpClient');\n\nconst objectTools = require('./util/objectTools');\n\nconst METHOD_POST = 'POST';\n\nconst CREATE_TASK_PATH = '/rest/2.0/kg/v1/pie/task_create';\nconst UPDATE_TASK_PATH = '/rest/2.0/kg/v1/pie/task_update';\nconst TASK_INFO_PATH = '/rest/2.0/kg/v1/pie/task_info';\nconst TASK_QUERY_PATH = '/rest/2.0/kg/v1/pie/task_query';\nconst TASK_START_PATH = '/rest/2.0/kg/v1/pie/task_start';\nconst TASK_STATUS_PATH = '/rest/2.0/kg/v1/pie/task_status';\n\n\n/**\n * AipKg类\n *\n * @class\n * @extends BaseClient\n * @constructor\n * @param {string} appid appid.\n * @param {string} ak  access key.\n * @param {string} sk  security key.\n */\nclass AipKg extends BaseClient {\n    constructor(appId, ak, sk) {\n        super(appId, ak, sk);\n    }\n    commonImpl(param) {\n        let httpClient = new HttpClient();\n        let apiUrl = param.targetPath;\n        delete param.targetPath;\n        let requestInfo = new RequestInfo(apiUrl,\n            param, METHOD_POST);\n        return this.doRequest(requestInfo, httpClient);\n    }\n\n    /**\n     * 创建任务接口\n     *\n     * @param {string} name - 任务名字\n     * @param {string} templateContent - json string 解析模板内容\n     * @param {string} inputMappingFile - 抓取结果映射文件的路径\n     * @param {string} outputFile - 输出文件名字\n     * @param {string} urlPattern - url pattern\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     *   limit_count 限制解析数量limit_count为0时进行全量任务，limit_count&gt;0时只解析limit_count数量的页面\n     * @return {Promise} - 标准Promise对象\n     */\n    createTask(name, templateContent, inputMappingFile, outputFile, urlPattern, options) {\n        let param = {\n            name: name,\n            template_content: templateContent,\n            input_mapping_file: inputMappingFile,\n            output_file: outputFile,\n            url_pattern: urlPattern,\n            targetPath: CREATE_TASK_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 更新任务接口\n     *\n     * @param {integer} id - 任务ID\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     *   name 任务名字\n     *   template_content json string 解析模板内容\n     *   input_mapping_file 抓取结果映射文件的路径\n     *   url_pattern url pattern\n     *   output_file 输出文件名字\n     * @return {Promise} - 标准Promise对象\n     */\n    updateTask(id, options) {\n        let param = {\n            id: id,\n            targetPath: UPDATE_TASK_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 获取任务详情接口\n     *\n     * @param {integer} id - 任务ID\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     * @return {Promise} - 标准Promise对象\n     */\n    getTaskInfo(id, options) {\n        let param = {\n            id: id,\n            targetPath: TASK_INFO_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 以分页的方式查询当前用户所有的任务信息接口\n     *\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     *   id 任务ID，精确匹配\n     *   name 中缀模糊匹配,abc可以匹配abc,aaabc,abcde等\n     *   status 要筛选的任务状态\n     *   page 页码\n     *   per_page 页码\n     * @return {Promise} - 标准Promise对象\n     */\n    getUserTasks(options) {\n        let param = {\n            targetPath: TASK_QUERY_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 启动任务接口\n     *\n     * @param {integer} id - 任务ID\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     * @return {Promise} - 标准Promise对象\n     */\n    startTask(id, options) {\n        let param = {\n            id: id,\n            targetPath: TASK_START_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n\n    /**\n     * 查询任务状态接口\n     *\n     * @param {integer} id - 任务ID\n     * @param {Object} options - 可选参数对象，key: value都为string类型\n     * @description options - options列表:\n     * @return {Promise} - 标准Promise对象\n     */\n    getTaskStatus(id, options) {\n        let param = {\n            id: id,\n            targetPath: TASK_STATUS_PATH\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n}\n\nmodule.exports = AipKg;\n\n","'use strict';\n/**\n * Copyright (c) 2017 Baidu.com, Inc. All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations under the License.\n *\n * @file AipSpeech\n * @author baiduAip\n */\nconst BaseClient = require('./client/baseClient');\n\nconst RequestInfo = require('./client/requestInfo');\n\nconst objectTools = require('./util/objectTools');\n\nconst HttpClientVoiceASR = require('./http/httpClientVoiceASR');\n\nconst HttpClientVoiceTTS = require('./http/httpClientVoiceTTS');\n\nconst code = require('./const/code');\n\nconst httpHeader = require('./const/httpHeader');\n\nconst METHOD_POST = 'POST';\n\nconst CONTENT_TYPE_JSON = 'application/json';\n\nconst HOST_VOP = 'vop.baidu.com';\nconst HOST_TSN = 'tsn.baidu.com';\nconst PATH_VOP = '/server_api';\nconst PATH_TTS = '/text2audio';\n\n/**\n * AipSpeech类，构造调用语音接口\n *\n * @class\n * @extends BaseClient\n * @constructor\n * @param {string} appid appid.\n * @param {string} ak  access key.\n * @param {string} sk  security key.\n */\nclass AipSpeech extends BaseClient {\n    constructor(appId, ak, sk) {\n        // 在speech.baidu.com上创建的应用需要跳过此项权限检查\n        super(appId, ak, sk, {isSkipScopeCheck: true});\n    }\n\n    recognize(buffer, format, rate, options) {\n        let param = {\n            speech: buffer && buffer.toString(code.BASE64),\n            format: format,\n            rate: rate,\n            channel: 1,\n            len: buffer && buffer.toString(code.BIN).length\n        };\n\n        return this.asrImpl(objectTools.merge(param, options));\n    }\n\n    recognizeByUrl(url, callback, format, rate, options) {\n        let param = {\n            url: url,\n            format: format,\n            rate: rate,\n            channel: 1,\n            callback: callback\n        };\n        return this.asrImpl(objectTools.merge(param, options));\n    }\n\n    asrImpl(param) {\n        let httpClient = new HttpClientVoiceASR();\n        let requestInfo = new RequestInfo(PATH_VOP, param, METHOD_POST, false, {\n                [httpHeader.CONTENT_TYPE]: CONTENT_TYPE_JSON\n            });\n        requestInfo.setHost(HOST_VOP);\n        return this.doRequest(requestInfo, httpClient);\n    }\n\n    text2audio(text, options) {\n        let param = {\n            tex: text,\n            lan: 'zh',\n            ctp: 1\n        };\n        return this.ttsImpl(objectTools.merge(param, options));\n    }\n\n    ttsImpl(param) {\n        let httpClient = new HttpClientVoiceTTS();\n        let requestInfo = new RequestInfo(PATH_TTS,\n            param, METHOD_POST, true);\n\n        requestInfo.setHost(HOST_TSN);\n\n        return this.doRequest(requestInfo, httpClient);\n    }\n\n}\n\nmodule.exports = AipSpeech;\n","'use strict';\n/**\n * Copyright (c) 2017 Baidu.com, Inc. All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations under the License.\n *\n * @file httpClientExt类\n * @author baiduAip\n */\n\nconst HttpClient = require('./httpClient');\nconst crypto = require('crypto');\n\n/**\n * HttpClientVoice类\n * 百度语音接口调用封装\n * 参考文档：http://speech.baidu.com/docs/asr/57\n *\n * @class\n * @extends HttpClient\n * @constructor\n */\nclass HttpClientVoiceASR extends HttpClient {\n    constructor() {\n        super();\n    }\n    postWithInfo(requestInfo) {\n        requestInfo.params.token = requestInfo.getAccessToken();\n        if (requestInfo.params.token === null) {\n            requestInfo.params.token = 'bcekey';\n        }\n        if (typeof requestInfo.params.cuid === 'undefined') {\n            requestInfo.params.cuid = this.genMd5(requestInfo.params.token);\n        }\n        let body = this.createBody(requestInfo.params);\n        let options = {\n            method: requestInfo.method,\n            url: requestInfo.getPureUrl(),\n            headers: requestInfo.headers,\n            encoding: null,\n            timeout: HttpClient.DEFAULT_TIMEOUT,\n            body: body\n        };\n\n        return this.req(options);\n    }\n    createBody(param) {\n        let body = JSON.stringify(param);\n        return body;\n    }\n    genMd5(str) {\n        let md5sum = crypto.createHash('md5');\n        md5sum.update(str);\n        str = md5sum.digest('hex');\n        return str;\n    }\n}\n\nmodule.exports = HttpClientVoiceASR;","'use strict';\n/**\n * Copyright (c) 2017 Baidu.com, Inc. All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations under the License.\n *\n * @file httpClientExt类\n * @author baiduAip\n */\n\nconst HttpClient = require('./httpClient');\nconst crypto = require('crypto');\n\n/**\n * HttpClientVoice类\n * 百度语音接口调用封装\n * 参考文档：http://speech.baidu.com/docs/asr/57\n *\n * @class\n * @extends HttpClient\n * @constructor\n */\nclass HttpClientVoiceTTS extends HttpClient {\n    constructor() {\n        super();\n    }\n    postWithInfo(requestInfo) {\n        requestInfo.params.tok = requestInfo.getAccessToken();\n        if (requestInfo.params.tok === null) {\n            requestInfo.params.tok = 'bcekey';\n        }\n        if (typeof requestInfo.params.cuid === 'undefined') {\n            requestInfo.params.cuid = this.genMd5(requestInfo.params.tok);\n        }\n\n        let options = {\n            method: requestInfo.method,\n            url: requestInfo.getPureUrl(),\n            headers: requestInfo.headers,\n            encoding: null,\n            timeout: HttpClient.DEFAULT_TIMEOUT,\n            form: requestInfo.params\n        };\n\n        return this.req(options).then(function(data) {\n            if (data instanceof Buffer) {\n                return {data: data}\n            }\n            return data;\n        });\n    }\n    genMd5(str) {\n        let md5sum = crypto.createHash('md5');\n        md5sum.update(str);\n        str = md5sum.digest('hex');\n        return str;\n    }\n}\n\nmodule.exports = HttpClientVoiceTTS;","'use strict';\n/**\n * Copyright (c) 2017 Baidu.com, Inc. All Rights Reserved\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n * the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations under the License.\n *\n * @file AipEasyDL.js\n * @author baidu aip\n */\n\n\n\nconst BaseClient = require('./client/baseClient');\n\nconst RequestInfo = require('./client/requestInfo');\n\nconst HttpClient = require('./http/httpClientExt');\n\nconst objectTools = require('./util/objectTools');\n\nconst METHOD_POST = 'POST';\n\nconst DETECT_PATH = '/rest/2.0/face/v3/detect';\nconst SEARCH_PATH = '/rest/2.0/face/v3/search';\nconst USER_ADD_PATH = '/rest/2.0/face/v3/faceset/user/add';\nconst USER_UPDATE_PATH = '/rest/2.0/face/v3/faceset/user/update';\nconst FACE_DELETE_PATH = '/rest/2.0/face/v3/faceset/face/delete';\nconst USER_GET_PATH = '/rest/2.0/face/v3/faceset/user/get';\nconst FACE_GETLIST_PATH = '/rest/2.0/face/v3/faceset/face/getlist';\nconst GROUP_GETUSERS_PATH = '/rest/2.0/face/v3/faceset/group/getusers';\nconst USER_COPY_PATH = '/rest/2.0/face/v3/faceset/user/copy';\nconst USER_DELETE_PATH = '/rest/2.0/face/v3/faceset/user/delete';\nconst GROUP_ADD_PATH = '/rest/2.0/face/v3/faceset/group/add';\nconst GROUP_DELETE_PATH = '/rest/2.0/face/v3/faceset/group/delete';\nconst GROUP_GETLIST_PATH = '/rest/2.0/face/v3/faceset/group/getlist';\nconst PERSON_VERIFY_PATH = '/rest/2.0/face/v3/person/verify';\nconst VIDEO_SESSIONCODE_PATH = '/rest/2.0/face/v1/faceliveness/sessioncode';\n\n\n/**\n * AipEasyDL类\n *\n * @class\n * @extends BaseClient\n * @constructor\n * @param {string} appid appid.\n * @param {string} ak  access key.\n * @param {string} sk  security key.\n */\nclass AipEasyDL extends BaseClient {\n    constructor(appId, ak, sk) {\n        super(appId, ak, sk);\n    }\n    commonImpl(param) {\n        let httpClient = new HttpClient();\n        let apiUrl = param.targetPath;\n        delete param.targetPath;\n        let requestInfo = new RequestInfo(apiUrl,\n            param, METHOD_POST);\n        return this.doRequest(requestInfo, httpClient);\n    }\n    requestImage(url, image, options) {\n        let param = {\n            image: image,\n            targetPath: url\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n    requestSound(url, sound, options) {\n        let param = {\n            sound: sound,\n            targetPath: url\n        };\n        return this.commonImpl(objectTools.merge(param, options));\n    }\n}\n\nmodule.exports = AipEasyDL;\n\n"]}